<link rel="stylesheet" type="text/css" href="/service/design/assets/css/user.css" />

<h2>사용자 관리</h2>
<section class="sub_cont_box" id="app">
	<section class="cont_box" v-if="!userList.currentRow">
		<h2 class="h2">사용자 리스트</h2>
		<div class="box-type03 col-inline">
			<label for="InputText02" class="label-type00 size-m icon-search">검색</label>
	        <select name="pUserGroupGb" class="size-m" id="pUserGroupGb" v-model="pUserGroupGb" data-vv-as="사용자 구분" v-validate="'required'" v-bind:class="{'invalid':errors.has('pUserGroupGb')}">
                <option v-for="(item, index) in smnCommcode.getCommcode('SMN', 'USER_GROUP_GB', 'select', 'CD_NM', 'N')" :value="item.CD">{{item.CD_NM}}</option>
            </select>
   			<input type="text" name="pSearchArgv" class="size-m" id="pSearchArgv" v-model="pSearchArgv" :placeholder="searchPlaceHolder('text')" @keyup.13="setUserList"  data-vv-as="사용자 명/아이디 " v-validate="searchPlaceHolder('validate')" v-bind:class="{'invalid':errors.has('pSearchArgv')}">
            
	        <input type="button" value="검색" class="btn type01 size-m" @click="setUserList">
	        <div class="f-right">
	            <input type="button" value="신규" class="btn type02 size-m" @click="newRow">
	        </div>
	    </div>

		<div class="col s12 l12">
		    <span class="board-info-txt size-m">총 <span>{{userListPaging.totalCnt}}</span>건의 게시물이 있습니다. (<span>{{userListPaging.getCurrentPage()}}</span> / {{userListPaging.getTotalPage()}})</span>
		</div>		
		<div class="col s12 m12 xl12">
			<div class="table-type04-wrap">
				<table class="table-type04 response" id="mainListLoading">
					<caption>사용자 아이디, 사용자 명, 부서 코드, 권한 코드, 성별 구분, 생년월일, 사용 여부를 조회 항목별 순서대로 안내하는 표입니다</caption>	
					<colgroup>
						<col width="30%" /> <!-- 소속 -->
						<col width="25%" /> <!-- 사용자 명 -->
						<col width="15%" /> <!-- 직종 -->
						<col width="20%" /> <!-- 생년월일 -->
						<col width="10%" /> <!-- 사용 여부 -->
	<!-- 						<col width="10%" /> 삭제 -->
					</colgroup>
					<thead>
						<tr>
							<th scope="col" class="left">소속</th>
							<th scope="col" class="left">사용자 명</th>
							<th scope="col" class="left">직종</th>
							<th scope="col">생년월일</th>
							<th scope="col">상태</th>
	<!-- 							<th scope="col">삭제</th> -->
						</tr>
					</thead>
					<tbody v-if="userList.getRowCount() > 0">
						<tr v-for="(item, index) in userList.data" v-if="userList.getRowType(index) != 8">
							<td class="left" data-header="소속"><a href="#!" @click="rowClick(index, item.USER_ID)">{{item.DEPT_NM}}</a></td>
							<td class="left" data-header="사용자 명"><a href="#!" @click="rowClick(index, item.USER_ID)">{{item.USER_NM}} ({{item.USER_ID}})</a></td>
							<td class="left" data-header="직종"><a href="#!" @click="rowClick(index, item.USER_ID)">{{item.USER_TYPE_GBNM}}</a></td>
							<td class="center" data-header="생년월일"><a href="#!" @click="rowClick(index, item.USER_ID)">{{mask('YYYY-MM-DD',item.BIRTHDAY)}}</a></td>
							<td class="center" data-header="상태"><a href="#!" @click="rowClick(index, item.USER_ID)">{{item.USER_STATUS_GBNM}}</a></td>
	<!-- 							<td class="center" data-header="삭제"><span class="icon-trashcan" @click="deleteRow(index)"></span></td> -->
						</tr>
					</tbody>
					<tbody v-else>
						<tr>
							<td colspan="100">검색결과가 없습니다.</td>
						</tr>
					</tbody>
				</table>
			</div>
			<paging :pagingset="userListPaging" :type="'normal'"></paging>
		</div>
	</section>
	
	<section class="cont_box" v-if="userList.currentRow" :key="componentKey">
		<div class="box-type01">
            <div class="form-group row form-row">
                <div class="col s12 m8 l8 xl8 pro-info-box">
                    <span class="pro-photo"><img :src="modiImgAddr(userList.currentRow.USER_GB, userList.currentRow.USER_ID)" alt=""></span>
                    <span class="pro-name">{{userList.currentRow.USER_NM}} ({{userList.currentRow.USER_ID}})</span>
                </div>
                <div class="col s12 m4 l4 xl4 right">
                   	<a href="#!" class="btn type01 size-m c-red left-icon icon-refresh" v-if="(userList.getRowType(userList.rowposition) == ROWTYPE_NORMAL || userList.getRowType(userList.rowposition) == ROWTYPE_UPDATE)" @click="messagePopup('init_password')">패스워드 초기화</a>
                   	<a href="#!" class="btn type01 size-m left-icon icon-corner-left-up" @click="userList.selectRow(-1)">목록</a>
                </div>
            </div>
        </div>
		<div class="tab-outter">
			<div class="tab-type04">
				<div class="tab-inner">
					<div rel="tab1"><a href="#!" @click="tabPage = 1" :class="{'active':tabPage == 1}">기본 정보</a></div>
					<div rel="tab2"><a href="#!" @click="tabPage = 2" :class="{'active':tabPage == 2}">추가권한 정보</a></div>
				</div>
			</div>
		</div>
		<div class="tab-container">
			<div id="tab1" class="tab-content" v-show="tabPage == 1">
				<h2 class="h4" v-if="userList.currentRow.ROW_TYPE == ROWTYPE_INSERT">신규 생성시 기본 비밀번호는 1212입니다.</h2>
				<div class="style_set box-type01">
				    <form>
						<div class="row form-row">
							<div class="form-group col s12 m6 l6 xl6">
					            <label class="label-type01 required" for="userId">사용자 아이디</label>
					            <input class="size-m" type="text" id="userId"  name="userId" placeholder="사용자 아이디 (example@example.com)" data-vv-as="사용자 아이디" v-model="userList.currentRow.USER_ID" v-validate="'required|max:30|email'" v-bind:class="{'invalid':errors.has('userId')}" :disabled="updateDisabled" @keyup="userIdChk()"/>
					            <small class="form-txt invalid" v-if="errorBag.name">{{ errorBag.name }}</small>
					            <invalid-message :visible="true" :name="'userId'" :verror="errors"/>
					            
					        </div> 
					    	<div class="form-group col s12 m6 l6 xl6">
					            <label class="label-type01 required" for="userId">사용자 명</label>
					            <input class="size-m" type="text" id="userNm"  name="userNm" placeholder="사용자 명" data-vv-as="사용자 명" v-model="userList.currentRow.USER_NM" v-validate="'required|max:300'" v-bind:class="{'invalid':errors.has('userNm')}"/>
					    		<invalid-message :visible="true" :name="'userNm'" :verror="errors"/>
					        </div> 
					    </div>
<!-- 						<div class="row form-row"> -->
<!-- 					    	<div class="form-group col s12 m4 l4 xl4"> -->
<!-- 					    		<label class="label-type01 required" for="birthday">생년월일</label> -->
<!-- 					    		<div class="date-form-wrap"> -->
<!-- 									<a href="#!" class="size-m"><span class="icon icon-calendar"></span></a> -->
<!-- 									<date-picker :value="userList.currentRow.BIRTHDAY" @input="function(value){ userList.currentRow ? userList.currentRow.BIRTHDAY = value : ''}" :invalid="errors.has('birthday')"></date-picker> -->
<!-- 									<input type="hidden" id="birthday" name="birthday" data-vv-as="생년월일 " v-model="userList.currentRow.BIRTHDAY" v-validate="'required'"> -->
<!-- 						            <invalid-message :visible="true" :name="'birthday'" :verror="errors"></invalid-message> -->
<!-- 								</div> -->
<!-- 							</div> -->
<!-- 					    	<div class="form-group col s12 m4 l4 xl4"> -->
<!-- 					    		<label class="label-type01 required" for="genderGb">성별 구분</label> -->
<!-- 					    		<select class="size-m" id="genderGb" name="genderGb" v-model="userList.currentRow.GENDER_GB" data-vv-as="성별 구분" v-validate="'required'" v-bind:class="{'invalid': errors.has('genderGb')}"> -->
<!-- 					    			<option v-for="(item, index) in smnCommcode.getCommcode('SMN', 'GENDER_GB', 'select', 'CD_NM', 'N')" :value="item.CD">{{item.CD_NM}}</option> -->
<!-- 								</select> -->
<!-- 								<invalid-message :visible="true" :name="'genderGb'" :verror="errors"/> -->
<!-- 					    	</div> -->
<!-- 					        <div class="form-group col s12 m4 l4 xl4"> -->
<!-- 				            	<label class="label-type01" for="genderGb">{{changeText('상태 구분', null)}}</label> -->
<!-- 				            	<select name="userStatusGb" class="size-m" id="userStatusGb" v-model="userList.currentRow.USE_YN" :disabled="userList.currentRow.USER_GB == '9' ? false : true"> -->
<!-- 					                <option v-for="(item, index) in _.filter(smnCommcode.getCommcode('SMN', 'USER_STATUS_GB', 'select', 'CD_NM', 'N', 'all'), function(e){return e.CD1 == userList.currentRow.USER_GROUP_GB || e.CD == '';})" :value="item.CD">{{item.CD_NM}}</option> -->
<!-- 					            </select> -->
<!-- 					        </div> -->
<!-- 						</div> -->
						<div class="row form-row">
					        <div class="form-group col s12 m6 l6 xl6">
					            <label class="label-type01" for="hpNo">휴대폰 번호</label>
					            <input class="size-m" type="text" id="hpNo"  name="hpNo" placeholder="하이픈('-')은 빼고 입력해주세요." data-vv-as="휴대폰 번호" v-model="userList.currentRow.HP_NO" v-validate="'max:100'"/>
					        </div> 
					    	<div class="form-group col s12 m6 l6 xl6">
					            <label class="label-type01" for="telNo">전화 번호</label>
					            <input class="size-m" type="text" id="telNo"  name="telNo" placeholder="하이픈('-')은 빼고 입력해주세요." data-vv-as="전화번호" v-model="userList.currentRow.TEL_NO" v-validate="'max:100'"/>
					        </div>
						</div>
						<div class="row form-row">
					    	<div class="form-group col s12 m6 l6 xl6">
					            <label class="label-type01" for="defaultAuthCd">신분 권한</label>
					            <input class="size-m" type="text" id="defaultAuthCd"  name="defaultAuthCd" :value="authCodeSet.getCustomcodeNm('AUTH_CD',userList.currentRow.DEFAULT_AUTH_CD,'AUTH_NM')" disabled="disabled"/>
					        </div>
					    	<div class="form-group col s12 m6 l6 xl6">
					            <label class="label-type01" for="deptNm">소속</label>
					            <input class="size-m" type="text" id="deptNm"  name="deptNm" v-model="userList.currentRow.DEPT_NM"/>
					        </div>
						</div>
						<div class="row form-row">
					        <!-- <div class="form-group col s12 m4 l4 xl4">
								<label class="label-type01" for="userGb">사용자 구분</label>
					    		<select class="size-m" id="userGb" name="userGb" v-model="userList.currentRow.USER_GB" disabled>
					    			<option v-for="(item, index) in smnCommcode.getCommcode('SMN', 'USER_GB', 'select', 'CD_NM', 'N')" :value="item.CD">{{item.CD_NM}}</option>
								</select>
							</div> -->
					    	<div class="form-group col s12 m6 l6 xl6">
					            <label class="label-type01" for="AddCol1">부서</label>
					            <input class="size-m" type="text" id="AddCol1"  name="AddCol1" v-model="userList.currentRow.ADD_COL1"/>
					        </div>
					    	<div class="form-group col s12 m6 l6 xl6">
					            <label class="label-type01" for="AddCol2">직책</label>
					            <input class="size-m" type="text" id="AddCol2"  name="AddCol2" v-model="userList.currentRow.ADD_COL2"/>
					        </div>					        
							<!-- <div class="form-group col s12 m4 l4 xl4">
					            <label class="label-type01" for="deptCd">{{changeText('부서 코드', null)}}</label>
					            <input class="size-m" type="text" id="deptCd"  name="deptCd" v-model="userList.currentRow.DEPT_CD" />
					        </div> --> 
<!-- 					        <div class="form-group col s12 m8 l8 xl8"> -->
<!-- 					            <label class="label-type01 required" for="deptNm">{{changeText('부서 명', null)}}</label> -->
<!-- 					            <input class="size-m" type="text" id="deptNm"  name="deptNm" v-model="userList.currentRow.DEPT_NM" :placeholder="changeText('부서 명', null)" :data-vv-as="changeText('부서 명', null)" v-validate="'required'" v-bind:class="{'invalid': errors.has('deptNm')}"/> -->
<!-- 								<invalid-message :visible="true" :name="'deptNm'" :verror="errors"/> -->
<!-- 					        </div> -->
					    </div>
<!-- 					    <div class="row form-row"> -->
<!-- 					        <div class="form-group col s12 m6 l2 xl2"> -->
<!-- 					            <label class="label-type01" for="zipno">우편번호</label> -->
<!-- 					            <div class="btn-input"> -->
<!-- 					                <a href="#!" class="btn type02 size-m center-icon" @click="postSearch"><span class="icon-search"></span></a>  -->
<!-- 					                <input class="size-m" type="text" id="zipno"  name="zipno" data-vv-as="우편번호" v-model="userList.currentRow.ZIPNO" v-validate="'max:10'" disabled="disabled"/> -->
<!-- 				                </div> -->
<!-- 					        </div> -->
<!-- 					        <div class="form-group col s12 m6 l6 xl6"> -->
<!-- 					            <label class="label-type01" for="addr1">주소</label> -->
<!-- 					            <input class="size-m" type="text" id="addr1"  name="addr1" data-vv-as="주소" v-model="userList.currentRow.ADDR1" v-validate="'max:500'" disabled="disabled"/> -->
<!-- 					        </div>  -->
<!-- 					        <div class="form-group col s12 m12 l4 xl4"> -->
<!-- 					            <label class="label-type01" for="addr2">주소상세</label> -->
<!-- 					            <input class="size-m" type="text" id="addr2"  name="addr2" data-vv-as="주소상세" v-model="userList.currentRow.ADDR2" v-validate="'max:500'"/> -->
<!-- 					        </div>  -->
<!-- 					    </div> -->
<!-- 						<div class="row form-row"> -->
<!-- 					    	<div class="form-group col s12 m4 l4 xl4"> -->
<!-- 					    		<label class="label-type01" for="pwdLastChgDt">{{changeText('가입 일자', null)}}</label> -->
<!-- 					    		<input class="size-m" type="text" id="pwdLastChgDt" name="pwdLastChgDt" :data-vv-as="changeText('가입 일자', null)"  v-model="userList.currentRow.PWD_LAST_CHG_DT" disabled/> -->
<!-- 					    	</div>  -->
<!-- 					    </div> -->
					    <div class="row form-row">
					    	<div class="form-group col s12 right">
					    		<a href="#!" class="btn type01 size-m" v-if="(userList.getRowType(userList.rowposition) == ROWTYPE_NORMAL || userList.getRowType(userList.rowposition) == ROWTYPE_UPDATE)" @click="messagePopup('user_delete',userList.rowposition)">회원탈퇴</a>
					    		<a href="#!" class="btn type02 size-m" @click="saveRow">저장</a>
<!--					    		<a href="#!" class="btn type02 size-m" @click="syncRowUser">사용자 동기화</a>-->
					    	</div>
					    </div>
					    <div class="row form-row">
						    <div class="form-group col-inline right">
						    </div>
						</div>
					</form>
				</div>
			</div>
			<div id="tab3" class="tab-content" v-show="tabPage == 2">
				<div class="table-type04-wrap">
		            <table class="table-type04 response">
						<caption>추가권한 코드, 추가권한 명, 권한부여 일시를 조회 항목별 순서대로 안내하는 표입니다</caption>	
						<colgroup>
							<col width="20%" />
							<col />
							<col width="30%" />
						</colgroup>
						<thead>
							<tr>
								<th scope="col">추가권한 코드</th>
								<th scope="col" class="left">추가권한 명</th>
								<th scope="col">권한부여 일시</th>
							</tr>
						</thead>
						<tbody v-if="userAuthList.getRowCount() > 0">
							<tr v-for="(item, index) in userAuthList.data" v-if="userAuthList.getRowType(index) != 8">
								<td data-header="추가권한 코드">{{item.AUTH_CD}}</td>
								<td class="left" data-header="추가권한 명">{{item.AUTH_NM}}</td>
								<td data-header="권한부여 일시">{{item.INSERT_DT}}</td>
							</tr>
						</tbody>
						<tbody v-else>
							<tr>
								<td colspan="100">검색결과가 없습니다.</td>
							</tr>
						</tbody>
					</table>
				</div>
				<paging :pagingset="userAuthListPaging" :type="'normal'"></paging>
			</div>
		</div>
	</section>
	<modal-message :modalset="messageModal" v-on:messagepoppupcallback="messagePopupCallback"></modal-message>
</section>

<script type="text/javascript">
/********************************************************************************************************************************************************************
 * vue start 
 ********************************************************************************************************************************************************************/
var vm = new Vue({
	el: '#app',
	//사용할 데이터
	data: {
		userList: new Dataset(),
		userAuthList: new Dataset(),
		updateDisabled: false,
		userListPaging: new PagingSet(10, 5),
		userAuthListPaging: new PagingSet(10, 5),
		componentKey: 0,
		errorBag: { 
			name: '', 
		},
	    pUserGroupGb: '1',
	    pUserStatusGb: '11',
	    pSearchArgv: '',
	    pUserTypeGb: '',
	    pDeptCd: '',
	    pDeptNm: '',
	    tabPage: 1,
	    mainListLoading: {id:'mainListLoading', val:false},
	    userAddBtnLoading : {id : 'userAddBtnLoading' , val : false},
	    detailSearch: false,
	    authCodeSet: new CustomcodeSet('/system-manager/auth',{pUseYn:'Y',pAuthGb:'02'}),
        messageModal: new ModalSet('common-msg-modal'),	// confirm 모달
	},
	//데이터 감시
	watch: {
		'userList.rowposition': {
			handler: function (val, oldVal) {
				if(this.userList.enableevent){
					var changeYn = this.userList.dataCompare(oldVal);
					var rowType = this.userList.getRowType(val);
					var oldRowType = this.userList.getRowType(oldVal);
					
					if(!changeYn || oldRowType == this.ROWTYPE_INSERT){
						this.userList.setDefaultRow(oldVal);
					}
					
					if(val != -1){
						if(rowType == this.ROWTYPE_NORMAL  || rowType == this.ROWTYPE_UPDATE){
							this.updateDisabled = true;	
						}else{
							this.updateDisabled = false;
						}	
						
						this.$validator.reset();	
					}
				}
			}
		},		
		'userList.data': {
			handler: function (val, oldVal) {
				if(this.userList.enableevent){
					var vm = this;
				  	val.filter(function(data, rowposition) {
				      	return Object.keys(data).some(function(colNm) {
				          	var diff = data[colNm] !== vm.userList.beforeData[rowposition][colNm];
				          	vm.userList.getRowType(rowposition); // 데이터셋의 내용이 변경될 때마다 rowType을 변경.
				          	if(diff) {
				          		//console.log('['+rowposition+'] '+vm.userList.beforeData[rowposition][colNm]+' == > '+data[colNm]);
				          		vm.userList.beforeData[rowposition][colNm] = _.cloneDeep(data[colNm]);
				          		//colNm, rosposition 
				          		vm.componentStateChange();
				          	}
				      	})
				  	});
				}
			},
			deep: true
	    },		
		'userListPaging.currentPage': {
			handler: function (val, oldVal) {
				//this.setUserList()
				this.userList.pageChange(val, this.userListPaging.getRowCnt());
			}
	    },
	    'userAuthListPaging.currentPage': {
			handler: function (val, oldVal) {
				//this.setUserList()
				this.userAuthList.pageChange(val, this.userAuthListPaging.getRowCnt());
			}
	    },
	    'pUserGroupGb': {
	    	handler: function (val, oldVal) {
	    	    this.pUserTypeGb = '';
	    	    this.pDeptCd = '';
	    	    this.pDeptNm = '';
	    		this.$validator.reset();
			}
	    },
	    'mainListLoading.val': {
	    	handler: function (val, oldVal) {
				this.LoadingOverlay($('#'+this.mainListLoading.id), val);
			}
	    },
	    'userAddBtnLoading.val' : {
	    	handler: function (val, oldVal) {
				this.LoadingOverlay($('#'+this.userAddBtnLoading.id), val);
			}
	    }
	},
	//마운트 된 시점수행
	mounted: function(){
		//this.setUserList();
	},
	//함수
	methods: {
		/* 사용자 리스트 조회 */
		setUserList: function(){
			var validate = this.$validator.validateAll();
			var self = this;
			
			validate.then(function(response) {
				if(response){
					self.mainListLoading.val = true;
					var param = {
						pUserGroupGb: self.pUserGroupGb, 
						pUserStatusGb: self.pUserStatusGb, 
						pSearchArgv: self.pSearchArgv, 
						pUserTypeGb: self.pUserTypeGb,
						pDeptCd: self.pDeptCd,
						pDeptNm: self.pDeptNm,
						pPageNo: self.userListPaging.currentPage, 
						pRowCnt: self.userListPaging.getRowCnt(),
					}
					
					var returnVal = userApi.user(param, false);
					self.userListPaging.currentPage = 1;
					
					returnVal.then(function(response) {
						self.userList.setRawData(response.data, self.userListPaging.getRowCnt());
						if(response.data.length > 0){
							self.userListPaging.setTotalCnt(response.data.length);
						}else{
							self.userListPaging.setTotalCnt(0);
						}
					}).catch(function(error) {
						console.error('error:', error);
					}).finally(function(){
						self.mainListLoading.val = false;
					});
				}
			});
		},
		/* 사용자 추가권한 리스트 조회 */
		setUserAuthList: function(pUserId){
			var self = this;
			var returnVal = authApi.userAddAuth(null, pUserId, false);
			self.userAuthListPaging.currentPage = 1;
			
			returnVal.then(function(response) {
				self.userAuthList.setRawData(response.data, self.userAuthListPaging.getRowCnt());
				if(response.data.length > 0){
					self.userAuthListPaging.setTotalCnt(response.data.length);
				}else{
					self.userAuthListPaging.setTotalCnt(0);
				}
			}).catch(function(error) {
				console.error('error:', error);
			}).finally(function(){
				
			});
		},
		/* 주소 검색 */
		postSearch: function() {
			new daum.Postcode({
		        oncomplete: function(data) {
		        	vm.userList.setColumn(vm.userList.rowposition,'ZIPNO',data.zonecode);
		        	vm.userList.setColumn(vm.userList.rowposition,'ADDR1',data.roadAddress);
		        	vm.componentKey++;
		        }
		    }).open();
		},
		/* 사용자 리스트 신규행 추가 */
		newRow: function(){
			var addObj = {
				'USER_ID' : '',
           		'USER_GB' : '1',
           		'USER_GROUP_GB' : '1',
           		'PWD' : '',
           		'INTERNAL_ID' : '',
           		'USER_NM' : '',
           		'DEFAULT_AUTH_CD' : 'S0001',
           		'RESNO' : '',
           		'BIRTHDAY' : '',
           		'GENDER_GB' : '',
           		'GENDER_GBNM' : '',
           		'DEPT_CD' : '-1',
           		'DEPT_NM' : '',
           		'TEL_NO' : '',
           		'HP_NO' : '',
           		'ZIPNO' : '',
           		'ADDR1' : '',
           		'ADDR2' : '',
           		'JOIN_DT' : '',
           		'USER_STATUS_GB' : 'Y',
           		'USE_YN' : 'Y',
           		'USER_STATUS_GBNM' : '사용',
           		'USER_PIC' : '',
           		'ADD_COL1' : '',
           		'ADD_COL2' : '',
           		'CNT' : '',   
           		 
           	};
			
			this.tabPage = 1;
			var newRowPosition = this.userList.addRow(addObj);
		},
		/* 사용자 아이디 중복 체크 */
		userIdChk: function(){
			var userId = this.userList.getColumn(this.userList.rowposition, 'USER_ID');	
			var returnVal = userApi.userIdChk(userId, false);
			var self = this;
			this.errorBag.name = '';
			returnVal.then(function(response) {
				if(response.data[0].CNT > 0) {
					self.errorBag.name = '해당 사용자 아이디가 이미 존재합니다.';
				}
				else {
					self.errorBag.name = '';
				}
			}).catch(function(error) {
				console.error('error:', error);
			})
		},
		/* 사용자 리스트 저장, 수정 */
		saveRow: function(){
			var validate = this.$validator.validateAll();
			var self = this;
			
			validate.then(function(response) {
				if(response){
					var rowposition = self.userList.rowposition;
					var rowType = self.userList.getRowType(rowposition);
					var returnVal = null;
					
					//신규
					if(rowType == self.ROWTYPE_INSERT){
						if(self.errorBag.name == '') {
							self.userList.currentRow.PWD = '1212';
						    returnVal = userApi.userInsert(self.userList.currentRow, true);
						}
						else {
							notifySubmit('warning', '사용자 저장', '입력항목을 확인해주세요.', 'icon-caution');
						}
					}
					//수정
					else if(rowType == self.ROWTYPE_UPDATE){
						returnVal = userApi.userUpdate(self.userList.currentRow, true);
					}else{
						notifySubmit('info', '사용자 저장', '저장할 내역이 없습니다.', 'icon-message');
					}
					
					if(!isNull(returnVal)){
						returnVal.then(function(response) {
							var data = response.data;
							
							if(data == '1' || data._INSERT_ROW_CNT == '1'){
								notifySubmit('success', '사용자 저장', '저장이 완료되었습니다.', 'icon-save');
								self.setUserList();
							}else{
								notifySubmit('warning', '사용자 저장', '저장에 실패하였습니다.', 'icon-caution');
							}
						}).catch(function(error) {
							console.error('error:', error);
						});
					}
				}else{
					notifySubmit('warning', '사용자 저장', '입력항목을 확인해주세요.', 'icon-caution');
				}
			});
		},
		syncRowUser: function(){
			var self = this;

			var returnVal = null;
			returnVal = userApi.userSyncUpdate(self.userList.currentRow, true);

			if(!isNull(returnVal)){
				returnVal.then(function(response) {
					var data = response.data;

					// if(data == '1' || data._INSERT_ROW_CNT == '1'){
						// notifySubmit('success', '사용자 저장', '저장이 완료되었습니다.', 'icon-save');
						self.setUserList();
					// }else{
						// notifySubmit('warning', '사용자 저장', '저장에 실패하였습니다.', 'icon-caution');
					// }
				}).catch(function(error) {
					console.error('error:', error);
				});
			}
		},
		/* 사용자 리스트 삭제 */
		deleteRow: function(row){
			var rowType = this.userList.getRowType(row); 
			var returnVal = null;
			var userId = this.userList.getColumn(row, 'USER_ID');
			var self = this;
			
			this.userList.deleteRow(row);
			if(rowType != self.ROWTYPE_INSERT) { /* 신규행 아닐시 삭제 */
				returnVal = userApi.userDelete(userId, true);
				returnVal.then(function(response) {
					if(response.status == '200'){
						notifySubmit('success', '사용자 삭제', '삭제가 완료되었습니다.', 'icon-trashcan');
						self.setUserList();
					}else{
						notifySubmit('warning', '사용자 삭제', '삭제에 실패하였습니다.', 'icon-caution');
					}
				}).catch(function(error) {
					console.error('error:', error);
				});	
			}
		},
		/* 서비스 리스트 상태 변경에 따른 컴포넌트 상태변경 */
		componentStateChange: function(){
			var rowposition = this.userList.rowposition;
			var rowType = this.userList.getRowType(rowposition);
			var self = this;
		},
		changeText: function(pText, pGb){
			var userGroupGb = '';
			
			if(pGb == 'search') userGroupGb = this.pUserGroupGb;
			else userGroupGb = this.userList.currentRow.USER_GROUP_GB;
			
			if(pText == '가입 일자'){
				if(userGroupGb == '1') return '입사일자';
				else if(userGroupGb == '4') return '입학 일자';
			}else if(pText == '내부 아이디'){
				if(userGroupGb == '1') return '사번';
				else if(userGroupGb == '4') return '학번';
			}else if(pText == '부서'){
				if(userGroupGb == '1') return '부서';
				else if(userGroupGb == '4') return '학과';
				else if(userGroupGb == '5' || userGroupGb == '9') return '소속';
			}else if(pText == '부서 코드'){
				if(userGroupGb == '1') return '부서 코드';
				else if(userGroupGb == '4') return '학과 코드';
				else if(userGroupGb == '5' || userGroupGb == '9') return '소속 코드';
			}else if(pText == '부서 명'){
				if(userGroupGb == '1') return '부서 명';
				else if(userGroupGb == '4') return '학과 명';
				else if(userGroupGb == '5' || userGroupGb == '9') return '소속 명';
			}else if(pText == '상태 구분'){
				if(userGroupGb == '1') return '재직 구분';
				else if(userGroupGb == '4') return '학적상태';
				else if(userGroupGb == '5' || userGroupGb == '9') return '사용 여부';
			}else if(pText == '종류 구분'){
				if(userGroupGb == '1') return '직종';
				else if(userGroupGb == '4') return '학년';
				else if(userGroupGb == '5' || userGroupGb == '9') return '해당 없음';
			}else if(pText == '등급 구분'){
				if(userGroupGb == '1') return '직급';
				else if(userGroupGb == '4') return '분반';
			}
			
			return pText;
		},
		rowClick: function(index, userId){
			this.userList.selectRow(index); 
			this.tabPage = 1;  
			this.setUserAuthList(userId);
		},
		/* 저장할때 메세지창 띄우기*/
        messagePopup: function(pId, pData) {
            var title = '확인';
            var cont = '해당 작업을 수행하시겠습니까?';
            
      		switch(pId) {
	    		case 'user_delete':
                    title = '사용자 삭제';
                    cont = '해당사용자를 삭제 하시겠습니까?</br><span style="color:#c90000;">(삭제 한 이후에는 복구가 불가능하며,</br>해당사용자와 관련 된 모든데이터가 삭제 됩니다.</br>삭제 대상 : 캘린,알림,레이아웃정보,톡톡,권한,구독정보 등)</span>';
	    			break;
	    		case 'init_password':
                    title = '패스워드 초기화';
                    cont = '선택 된 사용자의 패스워드를 초기화 하시겠습니까?</br><span style="color:#c90000;">(임의의 문자로 초기화 되며, 초기화 된 패스워드는</br>사용자의 이메일로 전송 됩니다.)</span>';
	    			break;
	    	}

	    	this.messageModal.openModal('confirm', title, cont, 'small', pId, pData);
        },
        //confirm 확인 callback함수 (확인/취소 등 구분값, confirm 호출 구분 값, 전달 데이터)
        messagePopupCallback: function(pGb, pId, pData) {	
	    	if(pGb!='confirm') return;
	    	
	    	switch(pId) {
	    		case 'user_delete':
	    			this.deleteRow(pData);
	    			break;
	    		case 'init_password':
	    			this.initPassword(pData);
	    			break;
	    	}
	    },
	    searchPlaceHolder: function(pGb) {
	    	if(pGb == 'text'){
	    		if(this.pUserGroupGb == '4' && isNull(this.pDeptCd) && isNull(this.pUserTypeGb)){
		    		return '사용자 명/아이디(2자이상)';	
		    	}else{
		    		return '사용자 명/아이디';
		    	}
	    	}else if(pGb == 'validate'){
	    		if(this.pUserGroupGb == '4' && isNull(this.pDeptCd) && isNull(this.pUserTypeGb)){
		    		return 'required|min:2';	
		    	}else{
		    		return '';	
		    	}
	    	}
	    },
	    initPassword: function() {
	    	var self = this;
	    	var userInfo = self.userList.currentRow;
	    	var returnVal = userApi.initUserPwd(userInfo, false);
			
			returnVal.then(function(response) {
				var data 	  = response.data;
				var errorCode = data.ERROR_CODE;
				var outMsg 	  = data.OUT_MSG;
				
				if(errorCode == '1') {
					notifySubmit('success', '패스워드 초기화', '패스워드 초기화가 완료되었습니다.', 'icon-save');
				} else {
					notifySubmit('warning', '패스워드 초기화', '패스워드 초기화에 실패하였습니다.\n'+'(ERROR_MSG: '+outMsg+')', 'icon-caution');
				}
			}).catch(function(error) {
				console.error('error:', error);
			}).finally(function(){
				
			});
	    },
		modiImgAddr: function(pUserGb, pUserId){
			var modiAddr = '/service/design/images/mypage/noimage.png';

			if(['1', '2', '3', '4', '5'].indexOf(pUserGb) > -1) {
				/* 이미지 불러오기 호출 주소용 카테고리 */
				var cateGoryStr = '';

				if(pUserGb == '4') cateGoryStr = 'US_SCRG_BASS';
				else if(pUserGb == '5') cateGoryStr = 'GS_SCRG_BASS';
				else if(pUserGb == '1' || pUserGb == '2' || pUserGb == '3') cateGoryStr = 'AM_PESN_MST';

				/* 호스트네임에 따른 이미지 호출 주소 설정 */
				// if ('portal.skhu.ac.kr' == location.hostname) modiAddr = 'https://hsctis.skhu.ac.kr/api/image/view/' + cateGoryStr + '/' + pUserId + '?access_token=' + this.session.ACCESS_TOKEN;
				// else modiAddr = 'https://tis.skhu.ac.kr/api/open/image/view/' + cateGoryStr + '/' + pUserId
				// modiAddr = 'https://tis.skhu.ac.kr/api/open/image/view/' + cateGoryStr + '/' + pUserId
			// }
			// if(!isNull(pAddr)){
			// 	modiAddr = pAddr.replace(/\\/g, '/');
			//
			// 	if(modiAddr.substring(1,4) == 'SMN'){
			// 		modiAddr = '/upload' + modiAddr;
			// 	}
			}else{
				modiAddr = '/service/design/images/mypage/noimage.png';
			}
			
			return modiAddr;
		},
		/* 사용자 동기화(추가) */
		userAdd : function(){
			var returnVal = userApi.userAdd(true);
			this.userAddBtnLoading.val = true;
			var self = this;
			returnVal.then(function(response){
				notifySubmit('success', '사용자 관리', '사용자동기화(추가)가 완료되었습니다.', 'icon-trashcan');
				self.userAddBtnLoading.val = false;
			}).catch(function(error) {
				console.error('error:', error);
			}).finally(function(){
				
			});
		}
	}
});
/*******************************************************************************************************************************************************************
 * vue end 
 ********************************************************************************************************************************************************************/
 
/*******************************************************************************************************************************************************************
 * javascript start 
 ********************************************************************************************************************************************************************/
$(document).ready(function(){
	$('.pro-photo img').on('error', function() {$(this).attr('src', '/service/design/images/mypage/noimage.png');});
});
/*******************************************************************************************************************************************************************
 * javascript end 
 ********************************************************************************************************************************************************************/
</script>

