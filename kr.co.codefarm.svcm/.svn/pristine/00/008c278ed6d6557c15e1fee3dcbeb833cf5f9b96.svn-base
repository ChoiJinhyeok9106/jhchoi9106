/**
 * 
 */
package kr.co.codefarm.svcm.amanager.haveexcel.controller;

import kr.co.codefarm.svcm.commons.map.ParameterMap;
import kr.co.codefarm.svcm.systemmanager.user.service.UserService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;

import kr.co.codefarm.svcm.amanager.haveexcel.service.HaveexcelService;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author 
 *
 */
@RestController
@RequestMapping(value = "/amanager/haveexcel")
public class HaveexcelController {

	@Autowired
	private HaveexcelService HaveexcelService;
	
	
	@GetMapping("/haveexcel-list")
	public List<Map<String, Object>> getHaveExcelList(ParameterMap parameterMap) {
		return HaveexcelService.getHaveExcelList(parameterMap.getMap());
	}
	
	@PostMapping("/insert-haveexcel")
	public ResponseEntity<?> insertService(@RequestBody List<Map<String, Object>> requestDataList) {
	    try {
	        int rows = requestDataList.size();

	        if (rows == 0) {
	            return ResponseEntity.badRequest().body("입력된 데이터가 없습니다.");
	        }

	        if (rows >= 50) {
	            return ResponseEntity.badRequest().body("50행까지만 자산정보를 입력해주세요");
	        }
	        
	        if (requestDataList.isEmpty()) {
	            return ResponseEntity.badRequest().body("입력된 데이터가 없습니다.");
	        }

	        // 첫 번째 요청 데이터 가져오기
	        Map<String, Object> firstData = requestDataList.get(0);
	        System.out.println("firstData : " + firstData);

	        // 필수 체크: 엑셀 구조 확인 - 헤더(row 0)가 null인 경우
	        if (firstData == null || firstData.isEmpty()) {
	            return ResponseEntity.badRequest().body("엑셀 구조가 맞지 않습니다. (헤더가 비어 있습니다.)");
	        }

	        // 헤더 구조 확인
	        if (!(
	        		"순번".equals(firstData.get("A")) &&
	                "RFID자산번호".equals(firstData.get("B")) &&
	                "기관자산번호".equals(firstData.get("C")) &&
	                "물품분류번호".equals(firstData.get("D")) &&
	                "물품규격번호".equals(firstData.get("E")) &&
	                "물품명".equals(firstData.get("F")) &&
	                "규격명".equals(firstData.get("G")) &&
	                "태그종류".equals(firstData.get("H")) &&
	                "내용연수".equals(firstData.get("I")) &&
	                "취득구분".equals(firstData.get("J")) &&
	                "회계구분".equals(firstData.get("K")) &&
	                "물품구분".equals(firstData.get("L")) &&
	                "구입일자".equals(firstData.get("M")) &&
	                "보유부서".equals(firstData.get("N")) &&
	                "삭제여부".equals(firstData.get("O")) &&
	                "사용위치".equals(firstData.get("P")) &&
	                "구입단가".equals(firstData.get("Q")) &&
	                "구입수량".equals(firstData.get("R")) &&
	                "물품대장종류".equals(firstData.get("S")) &&
	                "정리일자".equals(firstData.get("T")) &&
	                "제조사명".equals(firstData.get("U")) &&
	                "구매처명".equals(firstData.get("V")) &&
	                "비고".equals(firstData.get("W"))
	        )) {
	        	System.out.println("A컬럼 확인 : " + firstData.get("A"));
	        	System.out.println("B컬럼 확인 : " + firstData.get("B"));
	            return ResponseEntity.badRequest().body("엑셀 구조가 맞지 않습니다. (필수 항목명 확인 필요)");
	        }

	        for (int r = 1; r < requestDataList.size(); r++) {
	            Map<String, Object> jsonData = requestDataList.get(r);
	            
	            ParameterMap parameterMap = createParameterMapFromJson(jsonData, r + 1);

	            int insCnt = HaveexcelService.insertHaveExcel(parameterMap.getMap());

	            if (insCnt <= 0) {
	                return ResponseEntity.badRequest().body("자산 정보 입력에 실패하였습니다.");
	            }
	        }
	        return ResponseEntity.ok("OK");
	    } catch (Exception e) {
	        e.printStackTrace();
	        return ResponseEntity.badRequest().body("Excel Upload 에러 발생: " + e.getMessage());
	    }
	}
	    
	private ParameterMap createParameterMapFromJson(Map<String, Object> jsonData, int rowNumber) {
		ParameterMap parameterMap = new ParameterMap();
        Map<String, Object> paramMap = new HashMap<>();
        
        System.out.println("jsonData in createParameterMapFromJson: " + jsonData);
        
        paramMap.put("NUM", jsonData.get("A"));                                    // A col - 순번
        paramMap.put("ASSET_MGMT_NO", jsonData.get("B"));                          // B col - RFID 자산번호
        paramMap.put("INST_ASSET_MGMT_NO", jsonData.get("C"));                     // C col - 기관자산번호
        paramMap.put("ASSET_CL_NO", jsonData.get("D"));                            // D col - 물품분류번호
        paramMap.put("ASSET_STND_NO", jsonData.get("E"));                          // E col - 물품규격번호
        paramMap.put("ASSET_CL_NM", jsonData.get("F"));                            // F col - 물품명
        paramMap.put("ASSET_STND_NM", jsonData.get("G"));                          // G col - 규격명
        paramMap.put("TAG_KIND_CD", jsonData.get("H"));                            // H col - 태그종류
        paramMap.put("USE_YYCNT", jsonData.get("I"));                              // I col - 내용연수
        paramMap.put("ACQ_SE_CD", jsonData.get("J"));                              // J col - 취득구분
        paramMap.put("ACNTS_SE_CD", jsonData.get("K"));                            // K col - 회계구분
        paramMap.put("ASSET_ITEM_SE_CD", jsonData.get("L"));                       // L col - 물품구분
        paramMap.put("BUY_DT", jsonData.get("M"));                                 // M col - 구입일자
        paramMap.put("DEPT_CD", jsonData.get("N"));                                // N col - 보유부서
        paramMap.put("DTL_YN", jsonData.get("O"));                                 // O col - 삭제여부
        paramMap.put("USE_LOC_NM", jsonData.get("P"));                             // P col - 사용위치
        paramMap.put("BUY_UPRICE", jsonData.get("Q"));                             // Q col - 구입단가
        paramMap.put("BUY_QTY", jsonData.get("R"));                                // R col - 구입수량
        paramMap.put("GDS_RGST_KD_CD", jsonData.get("S"));                         // S col - 물품대장종류
        paramMap.put("ARN_DT", jsonData.get("T"));                                 // T col - 정리일자
        paramMap.put("PRODT_CORPO_NM", jsonData.get("U"));                         // U col - 제조사명
        paramMap.put("BUY_LOC_NM", jsonData.get("V"));                             // V col - 구매처명
        paramMap.put("RMK", jsonData.get("W"));                                    // W col - 비고

        paramMap.put("ERR_YN", "N");
        paramMap.put("ERR_CN", "-");
        
        System.out.println("paramMap in createParameterMapFromJson: " + paramMap); // 추가: 파라미터 맵 확인
        
        paramMap.put("EXCEL_ROW_NO", rowNumber); // EXCEL_ROW_NO 추가
        parameterMap.setMap(paramMap);
        return parameterMap;
    }


}
