<script type="text/javascript" src="/app-assets/js/api/amanager/havestatus.api.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.9/xlsx.full.min.js"></script>
<script type="text/javascript" src="/app-assets/js/api/amanager/commonsearch.api.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

<h3 style="margin-top:-20px;">자산보유 > 보유 > <strong>자산보유현황</strong></h3>
<section class="sub_cont_box" id="app" style="margin-top:10px;">
	<section class="cont_box" v-if="!mainList.currentRow">
		<div class="box-type03">
			<div class="row form-row">
				<div class="form-group col s12 l2">
					<label for="pServiceType" class="label-type01">보유부서</label>
					<div class="select-group" style="display: flex; align-items: center;">
						<select class="size-m" v-model="pDeptCd" name="pAcqDeptCd" id="pDeptCd">
							<option v-for="(item, index) in deptCodeSet.data" :value="item.ORGNZT_ID">{{item.ORGNZT_NM}}</option>
						</select>
						<button type="button" class="btn type02 size-s" @click="openModal('deptTreeModal');" style="width: 20px; display: flex; justify-content: center; align-items: center;">
							<span class="icon icon-search"></span>
						</button>
					</div>
				</div>
				
				<div class="form-group col s12 l2">
					<label for="pSearchType" class="label-type01">RFID자산번호</label>
					<div class="input-group" style="display: flex; align-items: center;">
						<input type="text" v-model="pAssetMgmtNo_S" id="pAssetMgmtNo_S" name="pAssetMgmtNo_S" class="size-m" v-on:keyup.13="search()">
						<span style="padding: 5px;">-</span>
						<input type="text" v-model="pAssetMgmtNo_E" id="pAssetMgmtNo_E" name="pAssetMgmtNo_E" class="size-m" v-on:keyup.13="search()">
					</div>
				</div>
				
				<div class="form-group col s12 l2">
					<label for="pSearchType" class="label-type01">물품명</label>
					<input type="text" v-model="pAssetClKoNm" id="pAssetClKoNm" name="pAssetClKoNm" class="size-m" v-on:keyup.13="search()">
				</div>
				
				<div class="form-group col s12 l2">
					<label for="frdt" class="label-type01">취득일자</label>
					<div class="date-group" style="display: flex; align-items: center;">
						<div class="row form-row">
							<div class="form-group col s12 l5">
								<div class="date-form-wrap">
									<a href="#!" class="size-m"><span class="icon icon-calendar"></span></a>
									<date-picker :value="acqDt_S" @input="function(value){ acqDt_S = value }"></date-picker>
									<input id="pAcqDt_S" type="hidden" name="targetname" data-vv-as="날짜 " v-model="acqDt_S">
								</div>
							</div>
							<div class="form-group col s12 l5">
								<div class="date-form-wrap">
									<a href="#!" class="size-m"><span class="icon icon-calendar"></span></a>
									<date-picker :value="acqDt_E" @input="function(value){ acqDt_E = value }"></date-picker>
									<input id="pAcqDt_E" type="hidden" name="targetname" data-vv-as="날짜 " v-model="acqDt_E">
								</div>
							</div>
						</div>
					</div>
				</div>
				
				<div class="form-group col s12 l2">
					<label for="pSearchType" class="label-type01">물품목록번호</label>
					<div class="input-group" style="display: flex; align-items: center;">
						<input type="text" v-model="pAssetClNo" id="pAssetClNo" name="pAssetClNo" class="size-m" v-on:keyup.13="search()">
						<span style="padding: 5px;">-</span>
						<input type="text" v-model="pAssetStndNo" id="pAssetStndNo" name="pAssetStndNo" class="size-m" v-on:keyup.13="search()">
						<button type="button" class="btn type02 size-s" @click.prevent="openModal('assetSearchModal');" style="width: 20px; display: flex; justify-content: center; align-items: center;">
							<span class="icon icon-search"></span>
						</button>
					</div>
				</div>
			</div>
			
			<div class="row form-row">
				<div class="form-group col s12 l2">
					<label for="pServiceType" class="label-type01">보유구분</label>
					<div class="select-group" style="display: flex; align-items: center;">
						<select class="size-m" v-model="pHaveSeCd" name="pHaveSeCd" id="pHaveSeCd">
							<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'GM0010', 'all', '', '', 'CD1')" v-bind:value="item.CD">{{item.CD_NM}}</option>
						</select>
					</div>
				</div>
				
				<div class="form-group col s12 l2">
					<label for="pSearchType" class="label-type01">기관자산번호</label>
					<div class="input-group" style="display: flex; align-items: center;">
						<input type="text" v-model="pInstAssetMgmtNo_S" id="pInstAssetMgmtNo_S" name="pInstAssetMgmtNo_S" class="size-m" v-on:keyup.13="search()">
						<span style="padding: 5px;">-</span>
						<input type="text" v-model="pInstAssetMgmtNo_E" id="pInstAssetMgmtNo_E" name="pInstAssetMgmtNo_E" class="size-m" v-on:keyup.13="search()">
					</div>
				</div>
				
				<div class="form-group col s12 l2">
					<label for="pSearchType" class="label-type01">규격명</label>
					<input type="text" v-model="pAssetStndKoNm" id="pAssetStndKoNm" name="pAssetStndKoNm" class="size-m" v-on:keyup.13="search()">
				</div>
				
				<div class="form-group col s12 l2">
					<label for="frdt" class="label-type01">구입일자</label>
					<div class="date-group" style="display: flex; align-items: center;">
						<div class="row form-row">
							<div class="form-group col s12 l5">
								<div class="date-form-wrap">
									<a href="#!" class="size-m"><span class="icon icon-calendar"></span></a>
									<date-picker :value="buyDt_S" @input="function(value){ buyDt_S = value }"></date-picker>
									<input id="pBuyDt_Start" type="hidden" name="targetname" data-vv-as="날짜 " v-model="buyDt_S">
								</div>
							</div>
							<div class="form-group col s12 l5">
								<div class="date-form-wrap">
									<a href="#!" class="size-m"><span class="icon icon-calendar"></span></a>
									<date-picker :value="buyDt_E" @input="function(value){ buyDt_E = value }"></date-picker>
									<input id="pBuyDt_End" type="hidden" name="targetname" data-vv-as="날짜 " v-model="buyDt_E">
								</div>
							</div>
						</div>
					</div>
				</div>
				
				<div class="form-group col s12 l2">
					<label for="pSearchType" class="label-type01">구입단가</label>
					<div class="input-group" style="display: flex; align-items: center;">
						<input type="text" v-model="pBuyUprice_S" id="pBuyUprice_S" name="pBuyUprice_S" class="size-m" v-on:keyup.13="search()">
						<span style="padding: 5px;">-</span>
						<input type="text" v-model="pBuyUprice_E" id="pBuyUprice_E" name="pBuyUprice_E" class="size-m" v-on:keyup.13="search()">
					</div>
				</div>
			</div>
			
			<div v-show="isSectionVisible">
				<div class="row form-row">
					<div class="form-group col s12 l2">
						<label for="pServiceType" class="label-type01">회계구분</label>
						<div class="select-group" style="display: flex; align-items: center;">
							<select class="size-m" v-model="pAcntsSeCd" name="pAcntsSeCd" id="pAcntsSeCd">
								<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'CM0030', 'all', '', '', 'CD1')" v-bind:value="item.CD">{{item.CD_NM}}</option>
							</select>
						</div>
					</div>
					
					<div class="form-group col s12 l2">
						<label for="pServiceType" class="label-type01">취득구분</label>
						<div class="select-group" style="display: flex; align-items: center;">
							<select class="size-m" v-model="pAcqSeCd" name="pAcqSeCd" id="pAcqSeCd">
								<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'GM0010', 'all', '', '', 'CD1')" v-bind:value="item.CD">{{item.CD_NM}}</option>
							</select>
						</div>
					</div>
						
					<div class="form-group col s12 l2">
						<label for="pServiceType" class="label-type01">태그종류</label>
						<div class="select-group" style="display: flex; align-items: center;">
							<select class="size-m" v-model="pTagKindCd" name="pTagKindCd" id="pTagKindCd">
								<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'GM0120', 'all', '', '', 'CD1')" v-bind:value="item.CD">{{item.CD_NM}}</option>
							</select>
						</div>
					</div>
					
					<div class="form-group col s12 l2">
						<label for="frdt" class="label-type01">발급요청일자</label>
						<div class="date-group" style="display: flex; align-items: center;">
							<div class="row form-row">
								<div class="form-group col s12 l5">
									<div class="date-form-wrap">
										<a href="#!" class="size-m"><span class="icon icon-calendar"></span></a>
										<date-picker :value="pIssuReqDt_S" @input="function(value){ pIssuReqDt_S = value }"></date-picker>
										<input id="pIssuReqDt_S" type="hidden" name="pIssuReqDt_S" data-vv-as="날짜 " v-model="pIssuReqDt_S">
									</div>
								</div>
								<div class="form-group col s12 l5">
									<div class="date-form-wrap">
										<a href="#!" class="size-m"><span class="icon icon-calendar"></span></a>
										<date-picker :value="pIssuReqDt_E" @input="function(value){ pIssuReqDt_E = value }"></date-picker>
										<input id="pIssuReqDt_E" type="hidden" name="pIssuReqDt_E" data-vv-as="날짜 " v-model="pIssuReqDt_E">
									</div>
								</div>
							</div>
						</div>
					</div>
					
					<div class="form-group col s12 l2">
						<label for="pServiceType" class="label-type01">태그발급상태</label>
						<div class="select-group" style="display: flex; align-items: center;">
							<select class="size-m" v-model="pRfidWriteCd" name="pRfidWriteCd" id="pRfidWriteCd">
								<option value=''>-전체-</option>
								<option value='0'>미발급</option>
								<option value='1'>발급요청</option>
								<!--<option value='2'>발급요청취소</option> -->
								<option value='4'>발급완료</option>
							</select>
						</div>
					</div>
				</div>
					
				<div class="row form-row">
					<div class="form-group col s12 l2">
						<label for="pServiceType" class="label-type01">자산구분</label>
						<div class="select-group" style="display: flex; align-items: center;">
							<select class="size-m" v-model="pAstDsCd" name="pAstDsCd" id="pAstDsCd">
								<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'CM0034', 'all', '', '', 'CD1')" v-bind:value="item.CD">{{item.CD_NM}}</option>
							</select>
						</div>
					</div>
					
					<div class="form-group col s12 l2">
						<label for="pServiceType" class="label-type01">예산구분</label>
						<div class="select-group" style="display: flex; align-items: center;">
							<select class="size-m" v-model="pBdgtCd" name="pBdgtCd" id="pBdgtCd">
								<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'CM0031', 'all', '', '', 'CD1')" v-bind:value="item.CD">{{item.CD_NM}}</option>
							</select>
						</div>
					</div>
					
					<div class="form-group col s12 l2">
						<label for="pServiceType" class="label-type01">비목구분</label>
						<div class="select-group" style="display: flex; align-items: center;">
							<select class="size-m" v-model="pExpnItemCd" name="pExpnItemCd" id="pExpnItemCd">
								<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'CM0032', 'all', '', '', 'CD1')" v-bind:value="item.CD">{{item.CD_NM}}</option>
							</select>
						</div>
					</div>
						
					<div class="form-group col s12 l2">
						<label for="pServiceType" class="label-type01">물품대장종류</label>
						<div class="select-group" style="display: flex; align-items: center;">
							<select class="size-m" v-model="pGdsRgstKdCd" name="pGdsRgstKdCd" id="pGdsRgstKdCd">
								<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'CM0011', 'all', '', '', 'CD1')" v-bind:value="item.CD">{{item.CD_NM}}</option>
							</select>
						</div>
					</div>
					
					<div class="form-group col s12 l2">
						<label for="pServiceType" class="label-type01">사용자</label>
						<div class="input-group" style="display: flex; align-items: center;">
							<input type="text" v-model="pUsrNm" id="pUsrId" name="pUsrId" class="size-m" v-on:keyup.13="search()">
							<button type="button" class="btn type02 size-s" @click.prevent="openModal('userSearchModal');" style="width: 20px; display: flex; justify-content: center; align-items: center;">
								<span class="icon icon-search"></span>
							</button>
						</div>
					</div>
				</div>
			</div>
			
			<div class="box-type01" @click="toggleSection" style="padding: 12px; height: 5px; display: flex; justify-content: center; align-items: center;">
				<div v-show="!isSectionVisible" style="display: flex; justify-content: center; width: 100%;">
					<span>▼</span>
				</div>
				<div v-show="isSectionVisible" style="display: flex; justify-content: center; width: 100%;">
					<span>▲</span>
				</div>
			</div>
		</div>
		
		<div style="display: flex; align-items: center;">
			<div class="col s12 l12" style="flex: 1;">
				<span class="board-info-txt size-m">총 <span>{{mainListPaging.totalCnt}}</span>건의 게시물이 있습니다.(<span>{{mainListPaging.getCurrentPage()}}</span> / {{mainListPaging.getTotalPage()}})</span>
			</div>
		</div>
		
		<div class="btn_container">
			<div class="col-inline btn-line left" style="display: flex; justify-content: flex-end;">
				<a href="#!" class="btn type04 size-m" @click="rowRequestTags()" class="margin-right: 5px;">태그발급요청</a>
				<a href="#!" class="btn type04 size-m" @click="rowRequestCnclTags()" class="margin-right: 5px;">태그발급취소</a>
				<a href="#!" class="btn type04 size-m" @click.prevent="modal_open('tagInputModal');return false;" class="margin-right: 5px;">태그발급요청(일괄등록)</a>
				<a href="#!" class="btn type04 size-m" @click.prevent="modal_open('tagInputcnclModal');return false;" class="margin-right: 5px;">태그발급취소(일괄등록)</a>
			</div>

			<div class="col-inline btn-line right" style="display: flex; justify-content: flex-end;">
				<a href="#!" class="btn type02 size-m center-icon" @click="resetFields"><span class="icon-refresh"></span></a>
				<a href="#!" class="btn type04 size-m left-icon icon-search" @click="search()" style="margin-right: 5px;">조회</a>
				<a href="#!" class="btn type04 size-m left-icon icon-edit" @click="rowCheckClick()" style="margin-right: 5px;">수정</a>
				<a href="#!" class="btn type02 size-m left-icon icon-report" @click="excelDownload()" style="margin-right: 5px;">엑셀</a>
			</div>
		</div>
		
		<!-- 테이블 영역 -->
		<div class="box-type03">
			<div class="col s12 m12 xl12">
				<div class="table-type01-wrap">
					<perfect-scrollbar style="max-height: 450px;">
						<table class="table-type01 response">
							<caption></caption>
							<thead class="thead-fixed">
								<tr>
									<th><input type="checkbox" v-model="selectAll" @change="toggleSelectAll" /></th>
									<th scope="col">No</th>
									<th scope="col" @click="sort('RFID_WRITE_NM')" class="sortable"><span :class="sortIcon('RFID_WRITE_NM')"></span> 태그발급상태</th>
									<th scope="col" @click="sort('ASSET_MGMT_NO')" class="sortable"><span :class="sortIcon('ASSET_MGMT_NO')"></span> RFID자산번호</th>
									<th scope="col" @click="sort('ASSET_CL_KO_NM')" class="sortable"><span :class="sortIcon('ASSET_CL_KO_NM')"></span> 물품명</th>
									<th scope="col" @click="sort('ASSET_STND_KO_NM')" class="sortable"><span :class="sortIcon('ASSET_STND_KO_NM')"></span> 규격명</th>
									<th scope="col" @click="sort('BUY_DT')" class="sortable"><span :class="sortIcon('BUY_DT')"></span> 구입일자</th>
									<th scope="col" @click="sort('BUY_UPRICE')" class="sortable"><span :class="sortIcon('BUY_UPRICE')"></span> 구입단가</th>
									<th scope="col" @click="sort('ACQ_DT')" class="sortable"><span :class="sortIcon('ACQ_DT')"></span> 취득일자</th>
								</tr>
							</thead>
							<tbody v-if="sortedData.length > 0">
								<tr v-for="(item, index) in sortedData" v-if="mainList.getRowType(index) != 8">
									<td><input type="checkbox" v-model="selectedRows[index]" /></td>
									<td data-header="No" style="text-align: center;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ index + 1 }}</a></td>
									<td data-header="태그발급상태" style="text-align: center;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.RFID_WRITE_NM }}</a></td>
									<td data-header="RFID자산번호" style="text-align: center;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.ASSET_MGMT_NO}}</a></td>
									<td data-header="물품명" style="text-align: left;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.ASSET_CL_KO_NM }}</a></td>
									<td data-header="규격명" style="text-align: left;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.ASSET_STND_KO_NM }}</a></td>
									<td data-header="구입일자" style="text-align: center;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.BUY_DT | dateFormatter }}</a></td>
									<td data-header="구입단가" style="text-align: right;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ numberFormatter(item.BUY_UPRICE) }}</a></td>
									<td data-header="취득일자" style="text-align: center;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.ACQ_DT | dateFormatter }}</a></td>
								</tr>
							</tbody>
							<tbody v-else>
								<tr>
									<td colspan="100">검색결과가 없습니다.</td>
								</tr>
							</tbody>
						</table>
					</perfect-scrollbar>
				</div>
				
				<!-- 페이지당 Row 선택 드랍다운 메뉴 -->
				<div class="col s12 l6" style="display: flex; align-items: center; justify-content: flex-end; margin-top: 10px;">
					<div class="col s3" style="margin-top: -2px;">
						<select class="size-s" v-model="pageSize" @change="changePageSize" name="pageSize" id="pageSize">
							<option v-for="sizeOption in pageSizes" :value="sizeOption">{{ sizeOption }} 건</option>
						</select>
					</div>
					<span style="margin-left: 10px; margin-bottom: 0;">/ 페이지당</span>
				</div>
				<paging :pagingset="mainListPaging" :type="'normal'" style="margin-top: -10px;"></paging>
			</div>
		</div>
	</section>

	<!-- 수정 화면 -->
	<section class="cont_box" v-if="mainList.currentRow">
		<h3 class="h3" v-if="mainList.getRowType(mainList.rowposition) == ROWTYPE_NORMAL || mainList.getRowType(mainList.rowposition) == ROWTYPE_UPDATE"> 보유자산 수정</h3>
		<div class="box-type04">
			<div class="form-group row">
				<div class="col s12 m12 l2">
					<label class="label-type01 required size-m" for="assetAcqNo">자산관리번호</label>
					<input type="text" class="size-m" id="assetMgmtNo" name="assetMgmtNo" data-vv-as="자산관리번호" placeholder="자산괸리번호 자동생성" v-model="mainList.currentRow.ASSET_MGMT_NO" disabled="disabled" />
				</div>
	
				<div class="col s12 m12 l2">
					<label class="label-type01 size-m" for="instAssetMgmtNo">기관자산번호</label>
					<input type="text" class="size-m" id="instAssetMgmtNo" name="instAssetMgmtNo" data-vv-as="기관자산번호" v-model="mainList.currentRow.INST_ASSET_MGMT_NO"/>
				</div>
				
				<div class="col m12 l2">
					<label for="pServiceType" class="label-type01 required size-m">보유부서</label>
					<div class="select-group" style="display: flex; align-items: center;">
						<select class="size-m" name="DeptCd" id="DeptCd" v-model="mainList.currentRow.DEPT_CD">
							<option v-for="(item, index) in deptCodeSet.data" :value="item.ORGNZT_ID">{{item.ORGNZT_NM}}</option>
						</select>
						<button type="button" class="btn type02 size-s" @click="openModal('deptTreeModal');" style="width: 20px; display: flex; justify-content: center; align-items: center;">
							<span class="icon icon-search"></span>
						</button>
					</div>
				</div>
				
				<div class="form-group col s12 m12 l2">
					<label class="label-type01 required size-m">물품목록번호</label>
					<div style="display: flex; align-items: center;">
						<input type="text" v-model="mainList.currentRow.ASSET_CL_NO" id="assetClNo" name="assetClNo" class="size-m" v-on:keyup.13="search()">
						<span style="margin-left: 5px; margin-right: 5px;">-</span>
						<input type="text" v-model="mainList.currentRow.ASSET_STND_NO" id="assetStndNo" name="assetStndNo" class="size-m" v-on:keyup.13="search()">
						<button type="button" class="btn type02 size-s" @click.prevent="openModal('assetSearchModal');" style="width: 20px; display: flex; justify-content: center; align-items: center;">
							<span class="icon icon-search"></span>
						</button>
					</div>
				</div>
				
				<div class="col m12 l2">
					<label for="pServiceType" class="label-type01 size-m">사용자</label>
					<div class="select-group" style="display: flex; align-items: center;">
						<input type="text" v-model="mainList.currentRow.USR_NM" id="usrId" name="usrId" class="size-m" v-on:keyup.13="search()" disabled>
						<button type="button" class="btn type02 size-s" @click.prevent="openModal('userSearchModal');" style="width: 20px; display: flex; justify-content: center; align-items: center;">
							<span class="icon icon-search"></span>
						</button>
					</div>
				</div>
			</div>
			
			<div class="form-group row" style="margin-top:-10px;">
				<div class="col s12 m12 l4">
					<label class="label-type01 required size-m">물품명</label>
					<input type="text" class="size-m" id="assetClKoNm" name="assetClKoNm" readonly="readonly" placeholder="물품목록번호 적용시 자동 생성" data-vv-as="물품명" v-model="mainList.currentRow.ASSET_CL_KO_NM" disabled />
				</div>
				
				<div class="col s12 m12 l6">
					<label class="label-type01 required size-m">규격명</label>
					<input type="text" class="size-m" id="assetStndKoNm" name="assetStndKoNm" readonly="readonly" placeholder="물품목록번호 적용시 자동 생성" data-vv-as="규격명" v-model="mainList.currentRow.ASSET_STND_KO_NM" disabled />
				</div>
			</div>
			
			<div class="form-group row">
				<div class="col s12 m12 l2">
					<label class="label-type01 size-m">취득일자</label>
					<date-picker :value="mainList.currentRow.ACQ_DT" @input="updateAcqDate" />
					<input type="text" class="size-m" id="acqDt" name="acqDt" data-vv-as="취득일자" v-model="mainList.currentRow.ACQ_DT">
				</div>
				
				<div class="col s12 m12 l2">
					<label class="label-type01 required size-m">구입일자</label>
					<date-picker :value="mainList.currentRow.BUY_DT" @input="updateBuyDate" />
					<input type="text" class="size-m" id="butDt" name="buyDt" data-vv-as="구입일자" v-model="mainList.currentRow.BUY_DT">
				</div>
				
				<div class="col s12 m12 l2">
					<label class="label-type01 required size-m">구입단가</label>
					<input type="text" class="size-m" id="buyUprice" name="buyUprice" data-vv-as="구입단가" v-model="formattedBuyUprice" />
				</div>
				
				<div class="col s12 m12 l2">
					<label class="label-type01 size-m" for="AssetItemSeCd">물품구분</label>
					<select class="size-m" name="AssetItemSeCd" id="AssetItemSeCd" v-model="mainList.currentRow.ASSET_ITEM_SE_CD">
						<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'GM0210')" v-bind:value="item.CD">{{item.CD_NM}}</option>
					</select>
				</div>
				
				<div class="col s12 m12 l2">
					<label class="label-type01 size-m">구입처</label>
					<input type="text" v-model="mainList.currentRow.BUY_LOC_NM" class="size-m" id="BuyLocNm" name="BuyLocNm" />
				</div>
			</div>
			
			<div class="form-group row">
				<div class="col s12 m12 l2">
					<label class="label-type01 required size-m" for="AcntsSeCd">회계구분</label>
					<select class="size-m" name="AcntsSeCd" id="AcntsSeCd" v-model="mainList.currentRow.ACNTS_SE_CD">
						<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'CM0030')" v-bind:value="item.CD">{{item.CD_NM}}</option>
					</select>
				</div>
				
				<div class="col s12 m12 l2">
					<label class="label-type01 required size-m" for="HaveSeCd">보유구분</label>
					<select class="size-m" name="HaveSeCd" id="HaveSeCd" v-model="mainList.currentRow.HAVE_SE_CD">
						<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'GM0010')" v-bind:value="item.CD">{{item.CD_NM}}</option>
					</select>
				</div>
				
				<div class="form-group col s12 m12 l2">
					<label class="label-type01 size-m">자산구분</label>
					<div class="select-group" style="display: flex; align-items: center;">
						<select class="size-m" v-model="mainList.currentRow.BDGT_CD" name="AstDsCd" id="AstDsCd" disabled>
							<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'CM0034', 'all', '', '', 'CD1')" v-bind:value="item.CD">{{item.CD_NM}}</option>
						</select>
					</div>
				</div>
				
				<div class="col s12 m12 l2">
					<label class="label-type01 size-m">예산구분</label>
					<div class="select-group" style="display: flex; align-items: center;">
						<select class="size-m" v-model="mainList.currentRow.BDGT_CD" name="BdgtCd" id="BdgtCd" disabled>
							<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'CM0031', 'all', '', '', 'CD1')"v-bind:value="item.CD">{{item.CD_NM}}</option>
						</select>
					</div>
				</div>
				
				<div class="col s12 m12 l2">
					<label class="label-type01 size-m">비목구분</label>
					<div class="select-group" style="display: flex; align-items: center;">
						<select class="size-m" v-model="mainList.currentRow.EXPN_ITEM_CD" name="ExpnItemCd" id="ExpnItemCd" disabled>
							<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'CM0032', 'all', '', '', 'CD1')" v-bind:value="item.CD">{{item.CD_NM}}</option>
						</select>
					</div>
				</div>
				

			</div>
			
			<div class="form-group row">
				<div class="col s12 m12 l2">
					<label class="label-type01 size-m" for="GdsRgstKdCd">물품대장종류</label>
					<select class="size-m" name="GdsRgstKdCd" id="GdsRgstKdCd" v-model="mainList.currentRow.GDS_RGST_KD_CD">
						<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'CM0011')" v-bind:value="item.CD">{{item.CD_NM}}</option>
					</select>
				</div>
				
				<div class="col s12 m12 l2">
					<label class="label-type01 required size-m" for="TagKindCd">태그종류</label>
					<select class="size-m" name="tagKindCd" id="tagKindCd" v-model="mainList.currentRow.TAG_KIND_CD">
						<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'GM0120')" v-bind:value="item.CD">{{item.CD_NM}}</option>
					</select>
				</div>
				
				<div class="col s12 m12 l2">
					<label class="label-type01 size-m">발급요청일자</label>
					<input type="text" class="size-m" id="issuReqDt" name="issuReqDt" data-vv-as="발급요청일자" v-model="formattedIssuReqDt" disabled="disabled" placeholder="YYYY-MM-DD">
				</div>
				
				<div class="col s12 m12 l2">
					<label class="label-type01 size-m">발급일자</label>
					<input type="text" class="size-m" id="IssuDt" name="IssuDt" data-vv-as="발급일자" v-model="formattedIssuDate" disabled="disabled" placeholder="YYYY-MM-DD">
				</div>
				
				<div class="col s12 m12 l2">
					<label class="label-type01 size-m">발급횟수</label>
					<input type="text" class="size-m" id="issuCnt" name="issuCnt" data-vv-as="발급횟수" v-model="mainList.currentRow.ISSU_CNT" disabled="disabled">
				</div>
			</div>
			
			<div class="form-group row">
				<div class="col s12 m12 l2">
					<label class="label-type01 size-m" for="BldgCd">건물구분</label>
					<select class="size-m" name="BldgCd" id="BldgCd" v-model="mainList.currentRow.BLDG_CD" @change="setUseLocList">
						<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'CM0310')" v-bind:value="item.CD">{{item.CD_NM}}</option>
					</select>
				</div>
				
				<div class="col s12 m12 l2">
					<label class="label-type01 size-m" for="StairCd">층구분</label>
					<select class="size-m" name="StairCd" id="StairCd" v-model="mainList.currentRow.STAIR_CD" @change="setUseLocList">
						<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'CM0320')" v-bind:value="item.CD">{{item.CD_NM}}</option>
					</select>
				</div>
				
				<div class="col s12 m12 l2">
					<label class="label-type01 size-m" for="LocCd">위치명</label>
					<select class="size-m" name="LocCd" id="LocCd" v-model="mainList.currentRow.LOC_CD">
						<option value="">-선택-</option>
						<option v-for="(item, index) in locOptions" :value="item.LOC_CD">{{ item.LOC_NM }}</option>
					</select>
				</div>
			</div>
			
			<div class="form-group row">
				<div class="col s12 m12 l12">
					<label class="label-type01 size-m">비고</label>
					<textarea type="text" class="size-m" id="rmk" name="rmk" rows="3" max="500" data-vv-as="비고" v-model="mainList.currentRow.RMK"></textarea>
				</div>
			</div>
		</div>
			
		<div class="btn-line right">
			<a href="#!" class="btn type02 size-m left-icon icon-checkmark" @click="saveRow">저장</a>
			<a href="#!" class="btn type01 size-m left-icon icon-close" @click="search($event)">닫기</a>
		</div>
	</section>
		
	<modal-message :modalset="messageModal" v-on:messagepoppupcallback="messagePopupCallback"></modal-message>
	
	<!-- 물품 목록 조회 모달 레이어 팝업 -->
	<div class="modal-layer-wrap">
		<div id="assetSearchModal" class="modal-layer modal-large">
			<div class="modal-container">
				<div class="modal-header">
					<p class="modal-title">자산 검색</p>
				</div>
				<section class="sub_cont_box">
					<section class="cont_box" v-if="!assetmodalList.currentRow">
						<div class="box-type03">
							<div class="modal-content">
								<div class="row form-row">
									<div class="form-group col s12 l3">
										<label for="pSearchType" class="label-type01">물품규격번호</label>
										<input type="text" v-model="pModalAssetStndNo" id="pModalAssetStndNo" name="pModalAssetStndNo" class="size-m" v-on:keyup.13="searchModal()">
									</div>
	
									<div class="form-group col s12 l3">
										<label for="pSearchType" class="label-type01">물 품 명</label>
										<input type="text" v-model="pModalAssetClKoNm" id="pModalAssetClKoNm" name="pModalAssetClKoNm" class="size-m" v-on:keyup.13="searchModal()">
									</div>
	
									<div class="form-group col s12 l5">
										<label for="pSearchType" class="label-type01">규 격 명</label>
										<input type="text" v-model="pModalAssetStndKoNm" id="pModalAssetStndKoNm" name="pModalAssetStndKoNm" class="size-m" v-on:keyup.13="searchModal()">
									</div>
								</div>
							</div>
						</div>
	
						<div style="display: flex; align-items: center;">
							<div class="col s12 l12" style="flex: 1;">
								<span class="board-info-txt size-m">총 <span>{{assetmodalListPaging.totalCnt}}</span>건의 게시물이있습니다. (<span>{{assetmodalListPaging.getCurrentPage()}}</span> /{{assetmodalListPaging.getTotalPage()}})</span>
							</div>
							<div class="col-inline btn-line right" style="display: flex; justify-content: flex-end;">
								<a href="#!" class="btn type02 size-m center-icon" @click="resetModalFields"><span class="icon-refresh"></span></a>
								<a href="#!" class="btn type04 size-m left-icon icon-search" @click="searchModal()" style="margin-right: 5px;">조회</a>
								<a href="#!" class="btn type04 size-m left-icon icon-close" @click.prevent="closeModal('assetSearchModal')" style="margin-right: 5px;">닫기</a>
							</div>
						</div>
	
						<div class="col s12 m12 xl12">
							<div class="table-type01-wrap">
								<perfect-scrollbar style="height:400px;">
									<table class="table-type01 response">
										<caption></caption>
										<col width="7%" />
										<col width="9%" />
										<col width="16%" />
										<col width="23%" />
										<col width="45%" />
										<thead class="thead-fixed">
											<tr>
												<th scope="col">선택</th>
												<th scope="col">사용여부</th>
												<th scope="col">물품목록번호</th>
												<th scope="col">물품명</th>
												<th scope="col">규격명</th>
											</tr>
										</thead>
										<tbody v-if="assetmodalList.data.length > 0">
											<tr v-for="(item, index) in assetmodalList.data" v-if="assetmodalList.getRowType(index) != 8">
												<td data-header="선택"><a href="#!" @click="messagePopup('ASSET_SELECT', index)"><span class="icon-checkmark"></span></a></td>
												<td data-header="사용여부">{{ item.USE_AT }}</td>
												<td data-header="물품목록번호">{{ item.CL_STND_CD }}</td>
												<td data-header="물품명" style="text-align: left;">{{ item.ASSET_CL_KO_NM }}</td>
												<td data-header="규격명" style="text-align: left;">{{ item.ASSET_STND_KO_NM }}</td>
											</tr>
										</tbody>
										<tbody v-else>
											<tr>
												<td colspan="100">검색결과가 없습니다.</td>
											</tr>
										</tbody>
									</table>
								</perfect-scrollbar>
							</div>
							<paging :pagingset="assetmodalListPaging" :type="'normal'"></paging>
						</div>
					</section>
				</section>
			</div>
		</div>
		
		<!-- 사용자검색 조회 모달 레이어 팝업 -->
		<div class="modal-layer-wrap">
			<div id="userSearchModal" class="modal-layer modal-large">
				<div class="modal-container">
					<div class="modal-header">
						<p class="modal-title">사용자검색</p>
					</div>
					<section class="sub_cont_box">
						<section class="cont_box" v-if="!usermodalList.currentRow">
							<div class="box-type03">
								<div class="modal-content">
									<div class="row form-row">
										<div class="form-group col s12 l5">
											<label for="pSearchType" class="label-type01">부서명</label>
											<div class="select-group" style="display: flex; align-items: center;">
												<select class="size-m" v-model="pModalDeptCd" name="pModalDeptCd" id="pModalDeptCd" v-on:keyup.13="searchUserModal()">
													<option v-for="(item, index) in deptCodeSet.data" :value="item.ORGNZT_ID">{{item.ORGNZT_NM}}</option>
												</select>
												<button type="button" class="btn type02 size-s" @click="openModal('deptTreeModal');" style="width: 20px; display: flex; justify-content: center; align-items: center;">
													<span class="icon icon-search"></span>
												</button>
											</div>
										</div>
		
										<div class="form-group col s12 l5">
											<label for="pSearchType" class="label-type01">사용자명</label>
											<input type="text" v-model="pModalUsrNm" id="pModalUsrNm" name="pModalUsrNm" class="size-m" v-on:keyup.13="searchUserModal()">
										</div>
									</div>
								</div>
							</div>
		
							<div style="display: flex; align-items: center;">
								<div class="col s12 l12" style="flex: 1;">
									<span class="board-info-txt size-m">총 <span>{{usermodalListPaging.totalCnt}}</span>건의 게시물이 있습니다. (<span>{{usermodalListPaging.getCurrentPage()}}</span> /{{usermodalListPaging.getTotalPage()}})</span>
								</div>
								<div class="col-inline btn-line right" style="display: flex; justify-content: flex-end;">
									<a href="#!" class="btn type02 size-m center-icon" @click="resetModalFields"><span class="icon-refresh"></span></a>
									<a href="#!" class="btn type04 size-m left-icon icon-search" @click="searchUserModal()" style="margin-right: 5px;">조회</a>
									<a href="#!" class="btn type04 size-m left-icon icon-close " @click.prevent="closeModal('userSearchModal')" style="margin-right: 5px;">닫기</a>
								</div>
							</div>
		
							<div class="col s12 m12 xl12">
								<div class="table-type01-wrap">
									<perfect-scrollbar style="max-height:400px;">
										<table class="table-type01 response">
											<caption></caption>
											<col width="7%" />
											<col width="9%" />
											<col width="16%" />
											<col width="23%" />
											<thead class="thead-fixed">
												<tr>
													<th scope="col">선택</th>
													<th scope="col">사원코드</th>
													<th scope="col">사용자명</th>
													<th scope="col">부서</th>
												</tr>
											</thead>
											<tbody v-if="usermodalList.data.length > 0">
												<tr v-for="(item, index) in usermodalList.data"
													v-if="usermodalList.getRowType(index) != 8">
													<td data-header="선택"><a href="#!" @click="selectUser(index)"><span class="icon-checkmark"></span></a></td>
													<td data-header="사원코드"><a href="#!" @dblclick="selectUser(index)">{{ item.USER_ID }}</a></td>
													<td data-header="사용자명"><a href="#!" @dblclick="selectUser(index)">{{ item.USER_NM }}</a></td>
													<td data-header="부서"><a href="#!" @dblclick="selectUser(index)">{{ item.DEPT_NM }}</a></td>
												</tr>
											</tbody>
											<tbody v-else>
												<tr>
													<td colspan="100">검색결과가 없습니다.</td>
												</tr>
											</tbody>
										</table>
									</perfect-scrollbar>
								</div>
								<paging :pagingset="usermodalListPaging" :type="'normal'"></paging>
							</div>
						</section>
					</section>
				</div>
			</div>
		</div>
		
		<!-- 태그발급요청(일괄등록) 모달 레이어 팝업 -->
		<div class="modal-layer-wrap">
			<div id="tagInputModal" class="modal-layer modal-middle">
				<div class="modal-container">
					<div class="modal-header">
						<p class="modal-title">태그발급요청(일괄등록)</p>
					</div>
					<section class="sub_cont_box">
						<section class="cont_box" v-if="!assetmodalList.currentRow" style="max-height: 240px !important;">
							<div class="box-type03">
								<div class="modal-content">
									<textarea v-model="assetNumbers" placeholder="자산번호를 한 줄에 하나씩 입력해주세요 (최대 1000개)"></textarea>
								</div>
							</div>
							<div class="col-inline btn-line right" style="display: flex; justify-content: flex-end;">
								<a href="#!" class="btn type02 size-m left-icon icon-checkmark" @click="saveAssetNumbers">저장</a>
								<a href="#!" class="btn type04 size-m left-icon icon-close " @click.prevent="closeModal('tagInputModal')">닫기</a>
							</div>
						</section>
					</section>
				</div>
			</div>
		</div>
		
		<!-- 태그발급취소(일괄등록) 모달 레이어 팝업 -->
		<div class="modal-layer-wrap">
			<div id="tagInputcnclModal" class="modal-layer modal-middle">
				<div class="modal-container">
					<div class="modal-header">
						<p class="modal-title">태그발급취소(일괄등록)</p>
					</div>
					<section class="sub_cont_box">
						<section class="cont_box" v-if="!assetmodalList.currentRow" style="max-height: 240px !important;">
							<div class="box-type03">
								<div class="modal-content">
									<textarea v-model="assetNumbers" placeholder="자산번호를 한 줄에 하나씩 입력해주세요 (최대 1000개)"></textarea>
								</div>
							</div>
							<div class="col-inline btn-line right" style="display: flex; justify-content: flex-end;">
								<a href="#!" class="btn type02 size-m left-icon icon-checkmark" @click="saveAssetcnclNumbers">저장</a>
								<a href="#!" class="btn type04 size-m left-icon icon-close " @click.prevent="closeModal('tagInputcnclModal')">닫기</a>
							</div>
						</section>
					</section>
				</div>
			</div>
		</div>
	</div>
	
	<!-- 부서 검색 모달 레이어 팝업 -->
	<div class="modal-layer-wrap">
		<div id="deptTreeModal" class="modal-layer modal">
			<div class="modal-container">
				<div class="modal-header">
					<p class="modal-title">부서검색</p>
				</div>
				<section class="sub_cont_box" style="min-height: 700px;">
					<div class="box-type03" style="height: auto; padding: 10px;">
						<div class="modal-content" style="padding: 10px;">
							<div class="row form-row" style="margin: 0;">
								<div class="form-group col s12 l5">
									<label for="pModalDeptNm" class="label-type01">부서명</label>
									<div class="input-group" style="display: flex; align-items: center;">   
										<input type="text" v-model="pModalDeptNm" id="pModalDeptNm" name="pModalDeptNm" class="size-m" v-on:keyup.13="searchDeptModal()">
										<button type="button" class="btn type02 size-s" @click="searchDeptModal()" style="width: 20px; display: flex; justify-content: center; align-items: center;">
											<span class="icon icon-search"></span>
										</button>
									</div>
								</div>
							</div>
						</div>
					</div>
					
					<div class="box-type04">
						<perfect-scrollbar style="max-height: 430px;">
							<div class="col s12 m12 xl12">
								<div v-if="deptTreeData.length === 0">
									<span>검색 결과가 없습니다. 검색어를 확인 후 다시 검색해주세요.</span>
								</div>
								<div v-else>
									<dept-tree :nodes="deptTreeData" :selectedNode.sync="selectedNode" v-model="selectedNodeId"></dept-tree>
								</div>
							</div>
						</perfect-scrollbar>
					</div>
					
					<div style="display: flex; justify-content: flex-end; align-items: center; max-height:50px;">
						<div class="col-inline btn-line right" style="display: flex; justify-content: flex-end;">
							<a href="#!" class="btn type02 size-m center-icon" @click="resetModalFields"><span class="icon-refresh"></span></a>
							<a href="#!" class="btn type04 size-m left-icon icon-search" @click="searchDeptModal()" style="margin-right: 5px;">조회</a>
							<a href="#!" class="btn type04 size-m left-icon icon-checkmark" @click="confirmDeptTreeModal()" style="margin-right: 5px;">선택</a>
							<a href="#!" class="btn type04 size-m left-icon icon-close " @click.prevent="closeModal('deptTreeModal')" style="margin-right: 5px;">닫기</a>
						</div>
					</div>
				</section>
			</div>
		</div>
	</div>
</section>

<template id="dept-tree-template">
	<ul class="dept-tree">
		<li v-for="node in nodes" :key="node.id">
			<div class="dept-node"
				:class="{'selected': node.selected, 'has-children': node.children && node.children.length > 0, 'open': node.open}"
				@click="toggle(node)">
				<input type="checkbox" v-model="node.selected" @change="selectNode(node)" style="margin-right: 5px;" />
				<i v-if="node.children && node.children.length" :class="{ 'open': node.open }"
					@click.stop="toggle(node)"></i> {{ node.text }}
			</div>
			<ul v-if="node.open && node.children && node.children.length > 0" class="sub-tree">
				<dept-tree v-for="childNode in node.children" :key="childNode.id" :nodes="[childNode]"
					:selectedNode.sync="selectedNode"></dept-tree>
			</ul>
		</li>
	</ul>
</template>

<script type="text/javascript">
/*******************************************************************************************************************************************************************
 * vue start
 ********************************************************************************************************************************************************************/
Vue.component('dept-tree', {
	template: '#dept-tree-template',
	props: {
		nodes: Array,
		selectedNode: String // 선택된 노드의 ID를 문자열로 받음
	},
	data() {
		return {
			selectedId: null // 초기값으로 null 설정
		};
	},
	computed: {
		// 선택된 노드의 id에 따라 클래스를 동적으로 반환
		nodeClass() {
			return (node) => ({
				'selected': this.selectedId === node.id,
				'has-children': node.children && node.children.length > 0,
				'open': node.open
			});
		}
	},
	methods: {
		toggle(node) {
			Vue.set(node, 'open', !node.open);
			// 부모 노드가 닫힌 상태일 때 자식 노드의 open 상태 초기화
			if (!node.open) {
				this.closeChildren(node);
			}
		},

		selectNode(node) {
			// 다른 체크박스들의 선택 상태를 해제
			this.nodes.forEach(n => {
				if (n !== node) {
					Vue.set(n, 'selected', false);
				}
			});
		},

		closeChildren(parentNode) {
			// 모든 자식 노드의 open 상태를 false로 설정
			parentNode.children.forEach(child => {
				Vue.set(child, 'open', false);
				this.closeChildren(child); // 자식 노드도 재귀적으로 닫기
			});
		}
	},
	watch: {
		nodes: {
			handler(newValue, oldValue) {
				// 체크된 노드의 ID 출력 및 selectedNode에 저장
				newValue.forEach(node => {
					if (node.selected) {
						this.selectedId = node.id;
					}
				});
				// 선택된 노드의 ID를 부모 컴포넌트로 전달
				this.$emit('input', this.selectedId); // 선택된 노드의 ID를 부모 컴포넌트로 전달
			},
			deep: true // 객체의 내부까지 깊게 감시
		},
	}
});

var vm = new Vue({
	el: '#app',

	/* 사용할 데이터 */
	data: function () {
		return {
			isUserSearchModalOpen: false,
			mainList: new Dataset(),
			assetmodalList: new Dataset(),
			usermodalList: new Dataset(),
			initialState: {
				buyDt_S: '',
				buyDt_E: '',
				acqDt_S: '',
				acqDt_E: '',
				acqArngDt_S: '',
				acqArngDt_E: '',
				pDeptCd: '00',
				pAssetClNo: '',
				pAssetClKoNm: '',
				pAssetStndNo: '',
				pAssetStndKoNm: '',
				//pInstAssetMgmtNo: '',
				pInstAssetMgmtNo_S: '',
				pInstAssetMgmtNo_E: '',
				pBdgtCd: '',
				pExpnItemCd: '',
				pAstDsCd: '',
				pAcntsSeCd: '',
				pAcqSeCd: '',
				pTagKindCd: '',
				pAcqRflcAt: 'ALL',
				pBuyUprice_S: '',
				pBuyUprice_E: '',
				pRmk: '',
				pAcqDtS: '',
				pAcqDtE: '',
				pGdsRgstKdCd: '',
				pAssetSeCd: '',
				pRfidWriteCd: '',
				pUsrId: '',
				pUsrNm: '',
				pIssuReqDt_S: '',
				pIssuReqDt_E: '',
				pHaveSeCd: '',
				pGdsRgstKdCd: '',
				pAssetMgmtNo_S: '',
				pAssetMgmtNo_E: '',
				LocCd: '',
			},
			initialModalState: {
				pModalAssetClKoNm: '',
				pModalAssetStndNo: '',
				pModalAssetStndKoNm: '',
				pModalDeptCd: '00',
				pModalUsrNm: '',
				assetNumbers: '',
				pModalDeptNm: '',
				pModalDeptCd: '',
				pModalUpDeptCd: '',
			},
			sortKey: '',
			sortOrders: {
				RFID_WRITE_NM: 0,
				ASSET_MGMT_NO: 'DESC',
				ASSET_CL_KO_NM: 0,
				ASSET_STND_KO_NM: 0,
				BUY_DT: 0,
				BUY_UPRICE: 0,
				ACQ_DT: 0,
			},
			assetNumbers: '',
			buyDt_S: '',
			buyDt_E: '',
			acqDt_S: '',
			acqDt_E: '',
			acqArngDt_S: '',
			acqArngDt_E: '',
			pAssetMgmtNo_S: '',
			pAssetMgmtNo_E: '',
			pDeptCd: '00',
			pAssetClNo: '',
			pAssetClKoNm: '',
			pModalAssetClKoNm: '',
			pAssetStndNo: '',
			pAssetStndKoNm: '',
			pModalAssetStndNo: '',
			pModalAssetStndKoNm: '',
			pModalDeptCd: '00',
			pModalDeptNm: '',
			pModalUpDeptCd: '',
			pModalUsrNm: '',
			//pInstAssetMgmtNo: '',
			pInstAssetMgmtNo_S: '',
			pInstAssetMgmtNo_E: '',
			pBdgtCd: '',
			pExpnItemCd: '',
			pAstDsCd: '',
			pAcntsSeCd: '',
			pAcqSeCd: '',
			pTagKindCd: '',
			pAcqRflcAt: 'ALL',
			pBuyUprice_S: '',
			pBuyUprice_E: '',
			pRmk: '',
			pAcqDtS: '',
			pAcqDtE: '',
			pGdsRgstKdCd: '',
			pAssetSeCd: '',
			pRfidWriteCd: '',
			pUsrId: '',
			pUsrNm: '',
			pIssuReqDt_S: '',
			pIssuReqDt_E: '',
			pHaveSeCd: '',
			pGdsRgstKdCd: '',
			AssetMgmtNoS: '',
			AssetMgmtNoE: '',
			LocCd: '',
			messageModal: new ModalSet('havestatus-modal'),
			mainListPaging: new PagingSet(10, 100),
			pageSizes: [100, 300, 500, 1000, 5000],
			pageSize: 100,
			size: 100,
			assetmodalListPaging: new PagingSet(10, 100),
			usermodalListPaging: new PagingSet(10, 100),
			deptCodeSet: new CustomcodeSet('/amanager/common/dept-list', {}),
			selectAll: false,
			selectedRows: [],
			isSectionVisible: false,
			excelData: new Array,
			locOptions: [],
			deptTreeData: [],
			selectedNodes: [],
			selectedNode: '',
			selectedNodeId: '',
		};
	},

	/* 생성 될 때 */
	beforeCreate: function () {
	},

	/* 계산된 속성 포현 시 */
	computed: {
		formattedBuyDt: {
			get() {
				return this.dateFormatter(this.mainList.currentRow.BUY_DT);
			},
			set(value) {
				this.mainList.currentRow.BUY_DT = value.replace(/-/g, '');
			}
		},

		formattedAcqArngDt: {
			get() {
				return this.dateFormatter(this.mainList.currentRow.ACQ_ARNG_DT);
			},
			set(value) {
				this.mainList.currentRow.ACQ_ARNG_DT = value.replace(/-/g, '');
			}
		},

		formattedBuyUprice: {
			get() {
				return this.numberFormatter(this.mainList.currentRow.BUY_UPRICE);
			},
			set(value) {
				this.mainList.currentRow.BUY_UPRICE = value.replace(/,/g, '');
			}
		},
		
		formattedIssuReqDt: {
			get() {
				return this.dateFormatter(this.mainList.currentRow.ISSU_REQ_DT);
			},
			set(value) {
				this.mainList.currentRow.ISSU_REQ_DT = value.replace(/-/g, '');
			}
		},
		
		formattedIssuDate: {
			get() {
				return this.dateFormatter(this.mainList.currentRow.ISSU_DATE);
			},
			set(value) {
				this.mainList.currentRow.ISSU_DATE = value.replace(/-/g, '');
			}
		},
		
		/* 테이블 정렬 추적 */
		sortedData() {
			if (this.sortKey) {
				return this.mainList.data.slice().sort((a, b) => {
					let result = 0;
					if (a[this.sortKey] > b[this.sortKey]) {
						result = 1;
					} else if (a[this.sortKey] < b[this.sortKey]) {
						result = -1;
					}
					return result * (this.sortOrders[this.sortKey] === 'ASC' ? 1 : -1);
				});
			} else {
				return this.mainList.data;
			}
		}
	},

	filters: {
		dateFormatter: function (value) {
			if (!value) return '';
			return value.replace(/(\d{4})(\d{2})(\d{2})/g, '$1-$2-$3');
		}
	},

	/* 데이터 감시 */
	watch: {
		'mainList.rowposition': {
			handler: function (val, oldVal) {
				if (this.mainList.enableevent) {
					var changeYn = this.mainList.dataCompare(oldVal);
					var rowType = this.mainList.getRowType(val);

					if (!changeYn) {
						this.mainList.setDefaultRow(oldVal);
					}

					this.$validator.reset();
				}
			}
		},

		'mainList.data': {
			handler: function (val, oldVal) {
				if (this.mainList.enableevent) {
					var vm = this;
					val.filter(function (data, rowposition) {
						return Object.keys(data).some(function (colNm) {
							var diff = data[colNm] !== vm.mainList.beforeData[rowposition][colNm];
							if (diff) {
								vm.mainList.beforeData[rowposition][colNm] = data[colNm];
								vm.componentStateChange();
							}
						})
					});
				}
			},
			deep: true
		},

		'mainListPaging.currentPage': {
			handler: function (val, oldVal) {
				this.setmainList(null, val)
			}
		},

		'assetmodalList.rowposition': {
			handler: function (val, oldVal) {
				if (this.assetmodalList.enableevent) {
					var changeYn = this.assetmodalList.dataCompare(oldVal);
					var rowType = this.assetmodalList.getRowType(val);

					if (!changeYn) {
						this.assetmodalList.setDefaultRow(oldVal);
					}

					this.$validator.reset();
				}
			}
		},

		'assetmodalList.data': {
			handler: function (val, oldVal) {
				if (this.assetmodalList.enableevent) {
					var vm = this;
					val.filter(function (data, rowposition) {
						return Object.keys(data).some(function (colNm) {
							var diff = data[colNm] !== vm.assetmodalList.beforeData[rowposition][colNm];
							if (diff) {
								vm.assetmodalList.beforeData[rowposition][colNm] = data[colNm];
								vm.componentStateChange();
							}
						})
					});
				}
			},
			deep: true
		},

		'assetmodalListPaging.currentPage': {
			handler: function (val, oldVal) {
				this.setassetmodalList(null, val)
			}
		},

		'usermodalList.rowposition': {
			handler: function (val, oldVal) {
				if (this.usermodalList.enableevent) {
					var changeYn = this.usermodalList.dataCompare(oldVal);
					var rowType = this.usermodalList.getRowType(val);
					if (!changeYn) {
						this.usermodalList.setDefaultRow(oldVal);
					}
					this.$validator.reset();
				}
			}
		},

		'usermodalList.data': {
			handler: function (val, oldVal) {
				if (this.usermodalList.enableevent) {
					var vm = this;
					val.filter(function (data, rowposition) {
						return Object.keys(data).some(function (colNm) {
							var diff = data[colNm] !== vm.usermodalList.beforeData[rowposition][colNm];
							if (diff) {
								vm.usermodalList.beforeData[rowposition][colNm] = data[colNm];
								vm.componentStateChange();
							}
						})
					});
				}
			},
			deep: true
		},

		'usermodalListPaging.currentPage': {
			handler: function (val, oldVal) {
				this.setusermodalList(null, val)
			}
		},

		'mainList.currentRow.BLDG_CD': function (newVal, oldVal) {
			if (newVal !== oldVal) {
				this.setUseLocList();
			}
		},
		'mainList.currentRow.STAIR_CD': function (newVal, oldVal) {
			if (newVal !== oldVal) {
				this.setUseLocList();
			}
		},
	},

	//마운트 된 시험수행
	mounted: function () {
		this.setmainList();
		document.addEventListener('keydown', this.handleEscKey);
	},
	
	beforeDestroy() {
		document.removeEventListener('keydown', this.handleEscKey);
	},
	
	/* 함수 */
	methods: {
		/* 메인 화면 set */
		setmainList: function (e, pPageNo, isExcelDownload, callback) {
			if (isNull(e) || e.keyCode == 13 || e.type == 'click' && isExcelDownload == 0) {
				var pAssetAcqNo = $('#pAssetAcqNo').val();
				//var pInstAssetMgmtNo= $('#pInstAssetMgmtNo').val();
				var pInstAssetMgmtNo_S = $('#pInstAssetMgmtNo_S').val();
				var pInstAssetMgmtNo_E = $('#pInstAssetMgmtNo_E').val();
				var pDeptCd = $('#pDeptCd option:selected').val();
				var pAcntsSeCd = $('#pAcntsSeCd option:selected').val();
				var pAstDsCd = $('#pAstDsCd option:selected').val();
				var pAcqSeCd = $('#pAcqSeCd option:selected').val();
				var pBdgtCd = $('#pBdgtCd option:selected').val();
				var pExpnItemCd = $('#pExpnItemCd option:selected').val();
				var pAcqRflcAt = $('#pAcqRflcAt option:selected').val();
				var pAssetClNo = $('#pAssetClNo').val();
				var pAssetClKoNm = $('#pAssetClKoNm').val();
				var pAssetStndNo = $('#pAssetStndNo').val();
				var pAssetStndKoNm = $('#pAssetStndKoNm').val();
				var pBuyUprice_S = $('#pBuyUprice_S').val();
				var pBuyUprice_E = $('#pBuyUprice_E').val();
				var pAssetMgmtNo_S = $('#pAssetMgmtNo_S').val();
				var pAssetMgmtNo_E = $('#pAssetMgmtNo_E').val();
				var pGdsRgstKdCd = $('#pGdsRgstKdCd').val();
				var pTagKindCd = $('#pTagKindCd').val();
				var pRmk = $('#pRmk').val();
				var pServiceType = $('#pServiceType option:selected').val();
				var pRfidWriteCd = $('#pRfidWriteCd option:selected').val();
				var pHaveSeCd = this.pHaveSeCd;
				var pBuyDt_S = this.buyDt_S
				var pBuyDt_E = this.buyDt_E;
				var pAcqDt_S = this.acqDt_S
				var pAcqDt_E = this.acqDt_E;
				var pAcqArngDt_S = this.acqArngDt_S;
				var pAcqArngDt_E = this.acqArngDt_E;
				var pIssuReqDt_S = this.pIssuReqDt_S;
				var pIssuReqDt_E = this.pIssuReqDt_E;
				var pUsrId = $('#pUsrId').val();
				var pUsrNm = $('#pUsrNm').val();
				var pageNo = pPageNo;
				var rowCount = this.mainListPaging.getRowCnt();

				if (isNull(pAssetAcqNo)) pAssetAcqNo = '';
				//if(isNull(pInstAssetMgmtNo))	pInstAssetMgmtNo		= '';
				if (isNull(pInstAssetMgmtNo_S)) pInstAssetMgmtNo_S = '';
				if (isNull(pInstAssetMgmtNo_E)) pInstAssetMgmtNo_E = '';
				if (isNull(pDeptCd)) pDeptCd = '';
				if (isNull(pAcntsSeCd)) pAcntsSeCd = '';
				if (isNull(pAstDsCd)) pAstDsCd = '';
				if (isNull(pAcqSeCd)) pAcqSeCd = '';
				if (isNull(pBdgtCd)) pBdgtCd = '';
				if (isNull(pExpnItemCd)) pExpnItemCd = '';
				if (isNull(pAcqRflcAt)) pAcqRflcAt = '';
				if (isNull(pBuyUprice_S)) pBuyUprice_S = '';
				if (isNull(pBuyUprice_E)) pBuyUprice_E = '';
				if (isNull(pAssetClNo)) pAssetClNo = '';
				if (isNull(pAssetClKoNm)) pAssetClKoNm = '';
				if (isNull(pAssetStndNo)) pAssetStndNo = '';
				if (isNull(pAssetStndKoNm)) pAssetStndKoNm = '';
				if (isNull(pHaveSeCd)) pHaveSeCd = '';
				if (isNull(pTagKindCd)) pTagKindCd = '';
				if (isNull(pBuyDt_S)) pBuyDt_S = '';
				if (isNull(pBuyDt_E)) pBuyDt_E = '';
				if (isNull(pAcqDt_S)) pAcqDt_S = '';
				if (isNull(pAcqDt_E)) pAcqDt_E = '';
				if (isNull(pAcqArngDt_S)) pAcqArngDt_S = '';
				if (isNull(pAcqArngDt_E)) pAcqArngDt_E = '';
				if (isNull(pIssuReqDt_S)) pIssuReqDt_S = '';
				if (isNull(pIssuReqDt_E)) pIssuReqDt_E = '';
				if (isNull(pAssetMgmtNo_S)) pAssetMgmtNo_S = '';
				if (isNull(pAssetMgmtNo_E)) pAssetMgmtNo_E = '';
				if (isNull(pGdsRgstKdCd)) pGdsRgstKdCd = '';
				if (isNull(pRmk)) pRmk = '';
				if (isNull(pRfidWriteCd)) pRfidWriteCd = '';
				if (isNull(pUsrId)) pUsrId = '';
				if (isNull(pUsrNm)) pUsrNm = '';
				if (isNull(pageNo)) pageNo = 1;
				if (isNull(rowCount)) rowCount = 100;
				
				// 엑셀 다운로드 로직
				if (isExcelDownload == 1) {
					rowCount = 9999;
					pageNo = 1;
				}
				
				var param = {
					'pAssetAcqNo': pAssetAcqNo,
					//'pInstAssetMgmtNo' 	: pInstAssetMgmtNo,
					'pInstAssetMgmtNo_S': pInstAssetMgmtNo_S,
					'pInstAssetMgmtNo_E': pInstAssetMgmtNo_E,
					'pDeptCd': pDeptCd,
					'pAcntsSeCd': pAcntsSeCd,
					'pAstDsCd': pAstDsCd,
					'pAcqSeCd': pAcqSeCd,
					'pBdgtCd': pBdgtCd,
					'pExpnItemCd': pExpnItemCd,
					'pAcqRflcAt': pAcqRflcAt,
					'pAssetClNo': pAssetClNo,
					'pAssetClKoNm': pAssetClKoNm,
					'pAssetStndNo': pAssetStndNo,
					'pAssetStndKoNm': pAssetStndKoNm,
					'pTagKindCd': pTagKindCd,
					'pHaveSeCd': pHaveSeCd,
					'pBuyUprice_S': pBuyUprice_S,
					'pBuyUprice_E': pBuyUprice_E,
					'pBuyDt_S': pBuyDt_S,
					'pBuyDt_E': pBuyDt_E,
					'pAcqDt_S': pAcqDt_S,
					'pAcqDt_E': pAcqDt_E,
					'pAcqArngDt_S': pAcqArngDt_S,
					'pAcqArngDt_E': pAcqArngDt_E,
					'pIssuReqDt_S': pIssuReqDt_S,
					'pIssuReqDt_E': pIssuReqDt_E,
					'pAssetMgmtNo_S': pAssetMgmtNo_S,
					'pAssetMgmtNo_E': pAssetMgmtNo_E,
					'pGdsRgstKdCd': pGdsRgstKdCd,
					'pRmk': pRmk,
					'pRfidWriteCd': pRfidWriteCd,
					'pUsrId': pUsrId,
					'pUsrNm': pUsrNm,
					'pPageNo': pageNo,
					'pRowCount': rowCount,
				};

				var self = this;
				var returnVal = haveStatusApi.getHaveStatusList(param, true);

				returnVal.then(function (response) {
					self.mainList.setData(response.data);
					self.excelData = response.data;

					if (self.mainList.getRowCount() > 0) {
						var totalCnt = self.mainList.data[0].CNT;
						self.mainListPaging.setTotalCnt(totalCnt);
					} else {
						self.mainListPaging.setTotalCnt(0);
					}
					if (typeof callback === "function") {
						callback();
					}
				});
			}
		},
		
		/*  페이지 당 Row 선택 */
		changePageSize: function () {
			this.mainListPaging.setRowCnt(this.pageSize);
			this.setmainList(null, 1);
		},
		
		/* 자산 검색 모달 set */
		setassetmodalList: function (e, pPageNo) {
			if (isNull(e) || e.keyCode == 13 || e.type == 'click') {
				var pModalAssetClKoNm = $('#pModalAssetClKoNm').val();
				var pModalAssetStndKoNm = $('#pModalAssetStndKoNm').val();
				var pModalAssetStndNo = $('#pModalAssetStndNo').val();
				var pageNo = pPageNo;
				var rowCount = this.assetmodalListPaging.getRowCnt();

				if (isNull(pModalAssetClKoNm)) pModalAssetClKoNm = '';
				if (isNull(pModalAssetStndKoNm)) pModalAssetStndKoNm = '';
				if (isNull(pModalAssetStndNo)) pModalAssetStndNo = '';
				if (isNull(pageNo)) pageNo = 1;
				if (isNull(rowCount)) rowCount = 20;

				var param = {
					'pModalAssetClKoNm': pModalAssetClKoNm,
					'pModalAssetStndKoNm': pModalAssetStndKoNm,
					'pModalAssetStndNo': pModalAssetStndNo,
					'pPageNo': pageNo,
					'pRowCount': rowCount
				};

				var self = this;

				var returnVal = commonSearchApi.getAsstNoList(param, true);

				returnVal.then(function (response) {
					self.assetmodalList.setData(response.data);

					if (self.assetmodalList.getRowCount() > 0) {
						var totalCnt = self.assetmodalList.data[0].CNT;
						self.assetmodalListPaging.setTotalCnt(totalCnt);
					} else {
						self.assetmodalListPaging.setTotalCnt(0);
					}
				});
			}
		},

		/* 사용자 검색 모달 set */
		setusermodalList: function (e, pPageNo) {
			if (isNull(e) || e.keyCode == 13 || e.type == 'click') {
				var pModalDeptCd = $('#pModalDeptCd option:selected').val();
				var pModalUsrNm = $('#pModalUsrNm').val();
				var pageNo = pPageNo;
				var rowCount = this.assetmodalListPaging.getRowCnt();

				if (isNull(pModalDeptCd)) pModalDeptCd = '';
				if (isNull(pModalUsrNm)) pModalUsrNm = '';
				if (isNull(pageNo)) pageNo = 1;
				if (isNull(rowCount)) rowCount = 20;

				var param = {
					'pModalDeptCd': pModalDeptCd,
					'pModalUsrNm': pModalUsrNm,
					'pPageNo': pageNo,
					'pRowCount': rowCount
				};

				var self = this;

				var returnVal = commonSearchApi.getUsrList(param, true);

				returnVal.then(function (response) {
					self.usermodalList.setData(response.data);

					if (self.usermodalList.getRowCount() > 0) {
						var totalCnt = self.usermodalList.data[0].CNT;
						self.usermodalListPaging.setTotalCnt(totalCnt);
					} else {
						self.usermodalListPaging.setTotalCnt(0);
					}
				});
			}
		},
		
		/* 사용 위치 검색 모달 set */
		setUseLocList() {
			const currentRow = this.mainList.currentRow;

			if (currentRow) {
				const bldgCd = currentRow.BLDG_CD;
				const stairCd = currentRow.STAIR_CD;

				if (bldgCd && stairCd) {
					const params = {
						BLDG_CD: bldgCd,
						STAIR_CD: stairCd
					};

					haveStatusApi.getUseLoc(params, true)
						.then(response => {
							this.locOptions = response.data;
						})
						.catch(error => {
							console.error("Error fetching location options:", error);
							this.locOptions = [];
						});
				} else {
					this.locOptions = [];
				}
			} else {
				this.locOptions = [];
			}
		},
		
		/*
		#### 부서 검색 모달 관련 method####
		.*/
		
		/* 트리 구조 생성 */
		buildTree(data) {
			let tree = [];
			let lookup = {};

			// 데이터 각 항목에 대해 변환을 준비
			data.forEach(item => {
				lookup[item.id] = {...item, children: [], selected: false};
			});

			// 트리 구조를 만듦
			data.forEach(item => {
				if (item.parent === '##' || !item.parent) {
					tree.push(lookup[item.id]);
				} else {
					// 부모 항목이 존재하는지 확인
					if (lookup[item.parent]) {
						const parent = lookup[item.parent];
						if (!parent.children.some(child => child.id === item.id)) {
							parent.children.push(lookup[item.id]);
						}
					} else {
						console.warn(`Parent ID ${item.parent} not found for item ID ${item.id}`);
					}
				}
			});
			return tree;
		},
		
		/* 부서 선택 후 적용 클릭 시 */
		confirmDeptTreeModal() {
			// 메인화면 진입 루트
			if (this.selectedNodeId && !this.mainList.currentRow && !this.isUserSearchModalOpen) {
				this.pDeptCd = this.selectedNodeId;
			// 사용자 검색 모달창 진입 루트
			} else if (this.selectedNodeId && this.isUserSearchModalOpen) {
				this.pModalDeptCd = this.selectedNodeId;
			// 수정화면 진입 루트
			} 	else if (this.selectedNodeId && this.mainList.currentRow && !this.isUserSearchModalOpen) {
				this.mainList.currentRow.DEPT_CD = this.selectedNodeId;
			}
			modal_close('deptTreeModal');
		},
		
		/* 이벤트 핸들러: 부모 컴포넌트에서 선택된 노드 ID 업데이트 */
		updateSelectedNodeId(nodeId) {
			this.selectedNodeId = nodeId;
		},
		
		/*
		#### 부서 검색 모달 관련 method####
		 */
		
		/* 일반 조회 */
		search: function (e, pPageNo) {
			var pageNo = this.mainListPaging.getCurrentPage();

			if (pageNo == 1) {
				this.setmainList(e, pPageNo, 0);
			} else {
				this.mainListPaging.movePage(1);
			}
		},

		/* 자산 검색 모달 조회 */
		searchModal: function (e, pPageNo) {
			var pageNo = this.assetmodalListPaging.getCurrentPage();

			if (pageNo == 1) {
				this.setassetmodalList(e, pPageNo);
			} else {
				this.assetmodalListPaging.movePage(1);
			}
		},

		/* 사용자 검색 모달 조회 */
		searchUserModal: function (e, pPageNo) {
			var pageNo = this.usermodalListPaging.getCurrentPage();
			if (pageNo == 1) {
				this.setusermodalList(e, pPageNo);
			} else {
				this.usermodalListPaging.movePage(1);
			}
		},
		
		/* 부서 검색 모달 조회 */
		searchDeptModal() {
			// Axios를 사용한 부서 검색 API 요청
			axios.get('/amanager/common/depttree-list', {
				params: {
					pDeptNm: this.pModalDeptNm,
				}
			}).then(response => {
				this.deptTreeData = this.buildTree(response.data);
			});
		},

		/* 데이터 형식 변환 */
		updateBuyDate(value) {
			this.mainList.currentRow.BUY_DT = value;
		},

		updateAcqDate(value) {
			this.mainList.currentRow.ACQ_DT = value;
		},

		updateIssuReqDtSDate(value) {
			this.mainList.currentRow.ISSU_REQ_DT_S = value;
		},

		updateIssuDate(value) {
			this.mainList.currentRow.ISSU_DATE = value;
		},

		numberFormatter(value) {
			if (!value) return '';
			return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
		},

		/* 보유 현황 수정 */
		saveRow: function () {
			/* 폼 입력 검증 */
			if (!this.mainList.currentRow.DEPT_CD) {this.messageModal.openModal('message', '보유부서 미입력', '보유부서(은/는) 필수 입력 항목입니다.', 'small', '', ''); return;}
			if (!this.mainList.currentRow.ASSET_CL_KO_NM) {this.messageModal.openModal('message', '물품명 미입력', '물품명(은/는) 필수 입력 항목입니다.', 'small', '', ''); return;}
			if (!this.mainList.currentRow.ASSET_STND_KO_NM) {this.messageModal.openModal('message', '규격명 미입력', '규격명(은/는) 필수 입력 항목입니다.', 'small', '', ''); return;}
			if (!this.mainList.currentRow.BUY_UPRICE) {this.messageModal.openModal('message', '구입단가 미입력', '구입단가(은/는) 필수 입력 항목입니다.', 'small', '', ''); return;}
			if (!this.mainList.currentRow.BUY_DT) {this.messageModal.openModal('message', '구입일자 미입력', '구입일자(은/는) 필수 입력 항목입니다.', 'small', '', ''); return;}
			if (!this.mainList.currentRow.HAVE_SE_CD) {this.messageModal.openModal('message', '보유구분 미입력', '보유구분(은/는) 필수 입력 항목입니다.', 'small', '', ''); return;}
			if (!this.mainList.currentRow.ACNTS_SE_CD) {this.messageModal.openModal('message', '회계구분 미입력', '회계구분(은/는) 필수 입력 항목입니다.', 'small', '', ''); return;}
			if (!this.mainList.currentRow.TAG_KIND_CD) {this.messageModal.openModal('message', '태그종류 미입력', '태그종류(은/는) 필수 입력 항목입니다.', 'small', '', ''); return;}

			var validate = this.$validator.validateAll();
			var self = this;

			validate.then(function (response) {
				if (response) {
					var rowposition = self.mainList.rowposition;
					var checkedIndex = self.selectedRows.findIndex(row => row === true);
					const selectedRow = self.mainList.data[checkedIndex];
					var rowType1 = self.mainList.getRowType(rowposition);
					var rowType2 = self.mainList.getRowType(checkedIndex);
					var returnVal = null;
					//수정 시 저장
					if (rowType1 == ROWTYPE_UPDATE || rowType2 == ROWTYPE_UPDATE) {
						returnVal = haveStatusApi.assetHaveUpdate(self.mainList.currentRow, false);
					}
					else {
						notifySubmit('info', '보유 현황 수정', '수정할 내역이 없습니다.', 'icon-message');
					}

					if (!isNull(returnVal)) {
						returnVal.then(function (response) {
							var data = response.data;
							notifySubmit('success', '보유 현황 수정', '수정이 완료되었습니다.', 'icon-save');
							self.setmainList(null, self.mainListPaging.currentPage, 0);
						}).catch(function (error) {
							notifySubmit('warning', '보유 현황 수정', '수정에 실패하였습니다.', 'icon-caution');
						});
					}
				}
				else {
					notifySubmit('warning', '보유 현황 수정', '입력항목을 확인해주세요.', 'icon-caution');
				}
			});
			self.resetSelectedRows();
		},

		/* 보유현황 리스트 상태 변경에 따른 컴포넌트 상태변경 */
		componentStateChange: function () {
		},

		/* 수정버튼 클릭시 체크박스 선택 및 수정여부 상태 확인 */
		rowCheckClick() {
			const checkedIndex = this.selectedRows.findIndex(row => row === true);

			if (checkedIndex !== -1) {
				const selectedRow = this.mainList.data[checkedIndex];
				this.mainList.setRowType(checkedIndex, this.ROWTYPE_UPDATE);
				this.mainList.rowposition = checkedIndex; // rowposition 설정
				this.mainList.currentRow = this.mainList.data[checkedIndex];
			}
			else {
				this.messageModal.openModal('message', '선택된 자산 없음', '자산을 선택 해주세요.', 'middle', '', '');
			}
		},

		/* 태그발급요청 클릭시 체크박스 선택 및 태그발급요청 상태 확인 */
		rowRequestTags() {
			const selectedRownum = [];
			let hasRequestRow = false; // 발급요청 행이 있는지 여부를 저장할 변수

			this.selectedRows.forEach((isSelected, index) => {
				if (isSelected) {
					const selectedRow = this.mainList.data[index];
					if (selectedRow.RFID_WRITE_NM === '발급요청') {
						hasRequestRow = true; // 발급요청 행이 있다고 표시
					} else if (selectedRow.RFID_WRITE_NM === '미발급' || selectedRow.RFID_WRITE_NM === '발급완료') {
						selectedRownum.push(selectedRow.ASSET_MGMT_NO);
					}

					if (selectedRow.TAG_KIND_CD === '70') {
						this.messageModal.openModal('message', '확인', '해당 물품은 태그종류 중 <제외>인 태그종류입니다.', 'middle', '', '');
						return;
					}
				}
			});

			if (hasRequestRow) {
				this.messageModal.openModal('message', '확인', '태그발급상태가 <발급요청> 중인 물품은 요청 불가능합니다.', 'middle', '', '');
			} else if (selectedRownum.length > 0) {
				this.messagePopup('INSERT_TA', selectedRownum);
			} else {
				this.messageModal.openModal('message', '선택된 자산 없음', '자산을 선택 해주세요.', 'middle', '', '');
			}
		},

		/* 태그 발급 요청 */
		insertTa() {
			var validate = this.$validator.validateAll();
			var self = this;

			validate.then(function (response) {
				if (response) {
					var selectedRownum = [];
					self.selectedRows.forEach((isSelected, index) => {
						if (isSelected) {
							const selectedRow = self.mainList.data[index];
							if (selectedRow.RFID_WRITE_NM === '미발급' || selectedRow.RFID_WRITE_NM === '발급완료') {
								selectedRownum.push(selectedRow.ASSET_MGMT_NO);
							} else if (selectedRow.RFID_WRITE_NM === '발급요청') {
								self.messageModal.openModal('message', '확인', '태그발급상태가 <발급요청> 중인 물품은 요청 불가능합니다.', 'middle', '', '');
							}
							if (selectedRow.TAG_KIND_CD === '70') {
								self.messageModal.openModal('message', '확인', '해당 물품은 태그종류 중 <제외>인 태그종류입니다.', 'middle', '', '');
							}
						}
					});

					if (selectedRownum.length > 0) {
						var updatePromises = selectedRownum.map(assetMgmtNo => {
							return haveStatusApi.insertTaPrtIssuReq(assetMgmtNo, false);
						});

						Promise.all(updatePromises)
							.then(function () {
								notifySubmit('success', '태그 발급 요청', '태그 발급 요청이 완료되었습니다.', 'icon-save');
								self.setmainList(null, self.mainListPaging.currentPage, 0);
								self.selectedRows.fill(false);
							})
							.catch(function (error) {
								notifySubmit('warning', '태그 발급 요청', '태그 발급 요청에 실패하였습니다.', 'icon-caution');
							});
					} else {
						self.messageModal.openModal('message', '선택된 자산 없음', '자산을 선택 해주세요.', 'middle', '', '');
					}
				}
			});
		},
		
		/* 태그발급취소 클릭시 체크박스 선택 및 태그발급취소 상태 확인 */
		rowRequestCnclTags() {
			const selectedRownum = [];
			let hasInvalidRow = false;

			this.selectedRows.forEach((isSelected, index) => {
				if (isSelected) {
					const selectedRow = this.mainList.data[index];
					if (selectedRow.RFID_WRITE_NM === '발급요청') {
						selectedRownum.push(selectedRow.ASSET_MGMT_NO);
					} else if (selectedRow.RFID_WRITE_NM === '발급완료' || selectedRow.RFID_WRITE_NM === '미발급') {
						hasInvalidRow = true;
					}
				}
			});

			if (hasInvalidRow) {
				this.messageModal.openModal('message', '확인', '태그발급상태가 <발급요청> 중인 물품만 취소가 가능합니다.', 'middle', '', '');
			} else if (selectedRownum.length > 0) {
				this.messagePopup('UPDATE_TA_CNCL', selectedRownum);
			} else {
				this.messageModal.openModal('message', '선택된 자산 없음', '자산을 선택 해주세요.', 'middle', '', '');
			}
		},

		/* 발급 요청 취소 */
		updatecnclTa() {
			const validate = this.$validator.validateAll();
			const self = this;

			validate.then(function (response) {
				if (response) {
					const selectedRownum = [];

					self.selectedRows.forEach((isSelected, index) => {
						if (isSelected) {
							const selectedRow = self.mainList.data[index];
							if (selectedRow.RFID_WRITE_NM === '발급요청') {
								selectedRownum.push(selectedRow.ASSET_MGMT_NO);
							} else if (selectedRow.RFID_WRITE_NM === '발급완료' || selectedRow.RFID_WRITE_NM === '미발급') {
								self.messageModal.openModal('message', '확인', '태그발급상태가 <발급요청> 중인 물품만 취소가 가능합니다.', 'middle', '', '');
							}
						}
					});

					if (selectedRownum.length > 0) {
						const updatePromises = selectedRownum.map(assetMgmtNo => {
							return haveStatusApi.updateTaPrtIsuuReqcncl({ASSET_MGMT_NO: assetMgmtNo}, false);  // 수정된 부분
						});

						Promise.all(updatePromises)
						.then(function () {
							notifySubmit('success', '태그 발급 취소', '태그 발급 취소가 완료되었습니다.', 'icon-save');
							self.setmainList(null, self.mainListPaging.currentPage, 0);
							self.selectedRows.fill(false);
						})
						.catch(function (error) {
							notifySubmit('warning', '태그 발급 취소', '태그 발급 취소에 실패하였습니다.', 'icon-caution');
						});
					}
				}
			});
		},

		/* 태그발급요청 일괄등록 */
		saveAssetNumbers() {
			// 사용자가 입력한 자산번호 리스트 가져오기
			const assetNumbers = this.assetNumbers.split('\n');

			// 입력된 자산번호 리스트 검증
			const validAssetNumbers = assetNumbers.filter(assetNumber => assetNumber.trim() !== '');
			if (validAssetNumbers.length === 0) {
				this.messageModal.openModal('message', '선택된 자산 없음', '자산번호를 입력해주세요.', 'middle', '', '');
				return;
			}

			// 태그 발급 요청 실행
			const updatePromises = validAssetNumbers.map(assetNumber => {
				return haveStatusApi.insertTaPrtIssuReq(assetNumber, false);
			});

			Promise.all(updatePromises)
				.then(() => {
					notifySubmit('success', '태그 발급 요청', '태그 발급 요청이 완료되었습니다.', 'icon-save');
					this.closeModal('tagInputModal'); //저장 후 모달창 닫기
					this.resetModalFields(); // 입력 필드 초기화
					this.setmainList(null, this.mainListPaging.currentPage, 0); // 메인 리스트 갱신
				})
				.catch(() => {
					notifySubmit('warning', '태그 발급 요청', '태그 발급 요청에 실패하였습니다.', 'icon-caution');
				});
		},

		/* 모달 레이어 팝업 Open */
		openModal(modalId) {
			modal_open(modalId);
			this.resetModalFields();
			if (modalId == 'assetSearchModal') {
				this.searchModal('', 1);
			} else if (modalId == 'userSearchModal') {
				this.isUserSearchModalOpen = true;
				this.searchUserModal('', 1);
			} else if (modalId == 'deptTreeModal') {
				this.searchDeptModal();
			}
		},
		
		/* 모달 레이어 팝업 Close */
		closeModal(modalId) {
			if (!this.mainList.currentRow) {
				modal_close(modalId);
				this.resetModalFields();
			} else {
				modal_close(modalId);
				this.resetModalFields();
			}
			
			if (modalId == 'ESC') {
				modal_close('assetSearchModal');
				modal_close('userSearchModal');
				modal_close('tagInputModal');
				modal_close('tagInputcnclModal');
				modal_close('deptTreeModal');
				this.resetModalFields();
				this.messageModal.closeModal()
			}
			this.isUserSearchModalOpen = false;
		},

		/* 태그발급취소 일괄등록 */
		saveAssetcnclNumbers() {
			// 사용자가 입력한 자산번호 리스트 가져오기
			const assetNumbers = this.assetNumbers.split('\n');

			// 입력된 자산번호 리스트 검증
			const validAssetNumbers = assetNumbers.filter(assetNumber => assetNumber.trim() !== '');
			if (validAssetNumbers.length === 0) {
				this.messageModal.openModal('message', '선택된 자산 없음', '자산번호를 입력해주세요.', 'middle', '', '');
				return;
			}

			// 태그 발급 요청 실행
			const updatePromises = validAssetNumbers.map(assetNumber => {
				return haveStatusApi.updateTaPrtIsuuReqcncl({ASSET_MGMT_NO: assetNumber}, false);
			});

			Promise.all(updatePromises)
			.then(() => {
				notifySubmit('success', '태그 발급 취소', '태그 발급 취소가 완료되었습니다.', 'icon-save');
				this.closeModal('tagInputcnclModal'); //저장 후 모달창 닫기
				this.resetModalFields(); // 입력 필드 초기화
				this.setmainList(null, this.mainListPaging.currentPage, 0); // 메인 리스트 갱신
			})
			.catch(() => {
				notifySubmit('warning', '태그 발급 요청', '태그 발급 취소에 실패하였습니다.', 'icon-caution');
			});
		},

		/* 특정 Row 더블클릭시 수정창 [index값 기준] open */
		rowDbClick: function (index) {
			var nRowType = this.mainList.setRowType(0, this.ROWTYPE_UPDATE);
			const selectedRow = this.mainList.data[index];
			this.mainList.selectRow(index);
		},

		/* 물품 목록 번호 적용 */
		selectAsset: function (row) {
			var self = this;
			var rowType = this.assetmodalList.getRowType(row);
			var getAssetClNo = this.assetmodalList.getColumn(row, 'ASSET_CL_NO');
			var getAssetStndNo = this.assetmodalList.getColumn(row, 'ASSET_STND_NO');
			var getAssetClKoNm = this.assetmodalList.getColumn(row, 'ASSET_CL_KO_NM');
			var getAssetStndKoNm = this.assetmodalList.getColumn(row, 'ASSET_STND_KO_NM');

			if (!this.mainList.currentRow) {
				this.pAssetClNo = getAssetClNo;
				this.pAssetStndNo = getAssetStndNo;

			} else if (this.mainList.currentRow !== null) {
				this.mainList.currentRow.ASSET_CL_NO = getAssetClNo;
				this.mainList.currentRow.ASSET_STND_NO = getAssetStndNo;
				this.mainList.currentRow.ASSET_CL_KO_NM = getAssetClKoNm;
				this.mainList.currentRow.ASSET_STND_KO_NM = getAssetStndKoNm;
			}
			modal_close('assetSearchModal');
		},

		/* 사용자 적용 */
		selectUser: function (row) {
			var self = this;
			var rowType = this.usermodalList.getRowType(row);
			var getUsrId = this.usermodalList.getColumn(row, 'USER_ID');
			var getUsrNm = this.usermodalList.getColumn(row, 'USER_NM');
			var getDeptNm = this.usermodalList.getColumn(row, 'DEPT_NM');

			if (!this.mainList.currentRow) {
				this.pUsrNm = getUsrNm;
				this.pUsrId = getUsrId;

			} else if (this.mainList.currentRow !== null) {
				this.mainList.currentRow.USR_ID = getUsrId;
				this.mainList.currentRow.USR_NM = getUsrNm;
				this.mainList.currentRow.DEPT_NM = getDeptNm;
			}
			modal_close('userSearchModal');
		},

		/* 메세지창 띄우기 */
		messagePopup: function (pId, pData) {
			console.log('messagePopup 호출됨', pId, pData); // 디버깅용 로그
			var title = '확인';
			var cont = '해당 작업을 수행하시겠습니까?';
			var pGb = 'confirm';

			switch (pId) {
				case 'ASSET_SELECT':
					title = '선택 및 적용';

					var index = pData;
					var selectedRow = this.assetmodalList.data[index];

					if (selectedRow) {
						var displayAssetClNo = selectedRow.ASSET_CL_NO;
						var displayAssetStndNo = selectedRow.ASSET_STND_NO;
						var displayAssetClNm = selectedRow.ASSET_CL_KO_NM;
						var displayAssetStndNm = selectedRow.ASSET_STND_KO_NM;

						cont = '해당 자산 <br /><br /> 물품번호 :  ' + displayAssetClNo + '-' + displayAssetStndNo +
							'<br /> 물품명 :  ' + displayAssetClNm +
							'<br /> 규격명 :  ' + displayAssetStndNm +
							'<br /><br />을(를) 선택하시겠습니까?';
					} else {
						cont = '선택한 자산 정보를 가져올 수 없습니다.';
					}
					break;

				case 'INSERT_TA':
					title = '확인';
					cont = '선택하신 물품을 <발급요청>하겠습니까?.'
					break;

				case 'UPDATE_TA_CNCL':
					title = '확인';
					cont = '선택하신 물품을 <발급요청취소>하겠습니까?.'
					break;
			}
			this.messageModal.openModal(pGb, title, cont, 'middle', pId, pData);
		},

		/* 메시지 콜백 */
		messagePopupCallback: function (pGb, pId, pData) {
			if (pGb != 'confirm') return;

			switch (pId) {
				case 'INSERT_TA':
					this.insertTa(pData);
					break;

				case 'UPDATE_TA':
					this.insertTa(pData);
					break;

				case 'UPDATE_TA_CNCL':
					this.updatecnclTa(pData);
					break;

				case 'ASSET_SELECT':
					this.selectAsset(pData);
					break;
			}
		},

		/* 검색조건 초기화 */
		resetFields() {
			Object.assign(this.$data, JSON.parse(JSON.stringify(this.initialState)));
		},
		
		/* 모달 검색조건 초기화 */
		resetModalFields() {
			Object.assign(this.$data, JSON.parse(JSON.stringify(this.initialModalState)));
		},

		/* 체크박스 선택시 데이터 저장*/
		toggleRowSelection(index) {
			if (this.selectedRows.includes(index)) {
				this.selectedRows = this.selectedRows.filter(i => i !== index);
				this.mainList.deselectRow(index);
			} else {
				this.selectedRows.push(index);
				this.mainList.selectRow(index);
			}
		},

		/* 프로세스 적용 후 체크 선택 해제 */
		resetSelectedRows() {
			this.selectedRows = [];
			this.selectAll = false;
		},

		/* 아코디언 설정 */
		toggleSection() {
			this.isSectionVisible = !this.isSectionVisible;
		},

		/* 체크박스 토글 */
		toggleCheckbox(index) {
			this.$set(this.selectedRows, index, !this.selectedRows[index]);
		},

		/* 모든 체크박스 토글  */
		toggleSelectAll() {
			this.selectedRows = this.mainList.data.map(() => this.selectAll);
		},
		
		/* ESC 버튼 다운시 핸들러 */
		handleEscKey(event) {
			if (event.key === 'Escape' || event.key === 'Esc') {
				this.closeModal('ESC');
			}
		},

		/* 엑셀 다운로드  */
		excelDownload() {
			// 데이터 조회
			this.setmainList(null, 1, 1, () => {
				
				let date = moment().format('YYYY-MM-DD');
				let filename = '자산보유_' + date + '.xlsx';
	
				const dataForExcel = this.excelData.map((item, index) => ({
					'No': index + 1,
					'태그발급상태': item.RFID_WRITE_NM,
					'RFID자산번호': item.ASSET_MGMT_NO,
					'기관자산번호': item.INST_ASSET_MGMT_NO,
					'물품목록번호': item.ASSET_CL_STND_CD,
					'물품명': item.ASSET_CL_KO_NM,
					'규격명': item.ASSET_STND_KO_NM,
					'취득일자': item.ACQ_DT,
					'구입일자': item.BUY_DT,
					'구입단가': item.BUY_UPRICE,
					'취득부서': item.ACQ_DEPT_NM,
					'회계구분': item.ACNTS_SE_NM,
					'취득구분': item.ACQ_SE_NM,
				}));
	
				// 데이터로 시트 생성
				const workSheet = XLSX.utils.json_to_sheet(dataForExcel);
	
				// 열 넓이 설정
				const colWidths = [
					{wpx: 30},      // No
					{wpx: 70},		// 태그발급상태
					{wpx: 110},      // RFID자산번호
					{wpx: 110},      // 기관자산번호
					{wpx: 120},      // 물품목록번호
					{wpx: 200},      // 물품명
					{wpx: 300},      // 규격명
					{wpx: 70},      // 취득일자
					{wpx: 70},      // 구입일자
					{wpx: 70},      // 구입단가
					{wpx: 150},      // 취득부서
					{wpx: 80},      // 회계구분
					{wpx: 80},      // 취득구분
				];
				workSheet['!cols'] = colWidths;
	
				// 워크북 생성 및 시트 추가
				const workBook = XLSX.utils.book_new();
				XLSX.utils.book_append_sheet(workBook, workSheet, '자산취득');
				XLSX.writeFile(workBook, filename);
			});
		},
		
		/* 테이블 정렬 상태값 적용 */
		sort(key) {
			if (this.sortKey === key) {
				this.sortOrders[key] = this.sortOrders[key] === 'ASC' ? 'DESC' : 'ASC';
			} else {
				this.sortKey = key;
				this.sortOrders = {
					RFID_WRITE_NM: 0,
					ASSET_MGMT_NO: 0,
					ASSET_CL_KO_NM: 0,
					ASSET_STND_KO_NM: 0,
					BUY_DT: 0,
					BUY_UPRICE: 0,
					ACQ_DT: 0,
				};
				this.sortOrders[key] = 'ASC';
			}
		},
		
		/* 테이블 정렬 아이콘 */
		sortIcon(key) {
			if (this.sortOrders[key] === 'ASC') {
				return 'icon-arrow3'; // 오름차순 아이콘
			} else if (this.sortOrders[key] === 'DESC') {
				return 'icon-arrow1'; // 내림차순 아이콘
			} else {
				return ''; // 초기 정렬 상태 아이콘
			}
		},
		
		dateFormatter(value) {
			if (!value) return '';
			return value.replace(/(\d{4})(\d{2})(\d{2})/g, '$1-$2-$3');
		},
	},
});

/*******************************************************************************************************************************************************************
 * vue end
 ********************************************************************************************************************************************************************/


/*******************************************************************************************************************************************************************
 * javascript start
 ********************************************************************************************************************************************************************/
function handleNullValues(row) {
	Object.keys(row).forEach(function (key) {
		if (row[key] === '') {
			row[key] = null;
		}
	});
	return row;
}
/*******************************************************************************************************************************************************************
 * javascript end
 ********************************************************************************************************************************************************************/
</script>

<style>
	.thead-fixed {
		position: sticky;
		top: 0;
		z-index: 1;
		background-color: #FFF;
	}

	.btn_container {
		display: flex;
		justify-content: space-between;
		align-items: center;
		/* 세로 중앙 정렬을 원할 경우 사용 */
	}

	.sub_cont_wrap {
		width: 97%;
		margin: 0 auto;
		margin-top: 40px;
		margin-bottom: 60px;
	}

	.sub_cont_wrap .sub_cont_box {
		padding: 20px;
		margin-bottom: 0px;
	}

	.row .col.l2 {
		width: 20%;
		margin-left: auto;
		left: auto;
		right: auto
	}

	.row .col.l4 {
		width: 40%;
		margin-left: auto;
		left: auto;
		right: auto
	}

	.row .col.l5 {
		width: 50%;
		margin-left: auto;
		left: auto;
		right: auto
	}

	.row .col.l6 {
		width: 60%;
		margin-left: auto;
		left: auto;
		right: auto
	}

	.date-form-wrap .size-m {
		font-size: 13.5px;
		/* 원하는 폰트 크기로 설정 */
	}

	th,	td {
		white-space: nowrap;
		/* 텍스트 줄바꿈 방지 */
		overflow: hidden;
		/* 넘치는 텍스트 숨김 */
		text-overflow: ellipsis;
	}
	
	/* 트리 구조를 위한 CSS */
	.dept-tree {
		list-style-type: none;
		padding-left: 20px;
	}

	.dept-node {
		display: flex;
		align-items: center;
		cursor: pointer;
		padding: 10px 0;
		position: relative;
	}

	.dept-node.selected {
		background-color: rgb(0, 64, 128);
		color: white;
	}

	.dept-node.open:before {
		content: "└";
		/* 부모 노드가 열린 경우 */
		margin-right: 5px;
	}

	.dept-node:not(.open):before {
		content: "-";
		/* 부모 노드가 닫힌 경우 */
		margin-right: 5px;
	}

	/* 자식 노드가 있는 경우를 나타내는 스타일 */
	.dept-node.has-children {
		color: #4f5685;
		font-weight: bold;
	}

	/* 자식 노드가 있는 경우를 나타내는 스타일(before/open) */
	.dept-node.has-children.open:before {
		content: "└";
		color: #4f5685;
		font-weight: bold;
	}

	/* 자식 노드가 있는 경우를 나타내는 스타일(before/closed) */
	.dept-node.has-children::before {
		content: "≡";
		color: #4f5685;
		font-weight: bold;
	}

	.sub-tree {
		padding-left: 10px;
		/* 자식 노드 리스트의 들여쓰기 설정 */
	}

	.parent-node {
		cursor: pointer;
		font-weight: bold;
	}

	.sortable {
		cursor: pointer;
		transition: background-color 0.3s, color 0.3s;
	}

	.sortable:hover {
		background-color: rgb(204, 204, 204);
		color: #333;
	}
	
	.sub_cont_wrap .sub_cont_box {
		min-height: 200px;
	}
</style>
