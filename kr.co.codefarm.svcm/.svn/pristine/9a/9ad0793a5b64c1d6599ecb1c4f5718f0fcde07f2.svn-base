<script type="text/javascript" src="/app-assets/js/api/amanager/gdscdmgmt.api.js"></script>
<script type="text/javascript" src="/app-assets/js/api/amanager/commonsearch.api.js"></script>


<h3 style="margin-top:-20px;">자산관리 > 설정 > 물품코드 > <strong>물품코드관리</strong></h3>
<section class="sub_cont_box" id="app" style="margin-top:10px;">
	<section class="cont_box" v-if="!mainList.currentRow">
		<div class="box-type03">
			<div class="row form-row">
				<div class="form-group col s12 l2">
			        <label for="pSearchType" class="label-type01" >물품분류번호</label>
		        	<input type="text" v-model="pAssetClNo" id="pAssetClNo" name="pAssetClNo"  class="size-m" v-on:keyup.13="search()">
			    </div>
			
				<div class="form-group col s12 l2">
				    <label for="pSearchType" class="label-type01">물품명</label>
				    <input type="text" v-model="pAssetClKoNm" id="pAssetClKoNm" name="pAssetClKoNm" class="size-m" v-on:keyup.13="search()">
				</div>
				
				<div class="form-group col s12 l2">
				    <label for="pSearchType" class="label-type01">규격명</label>
				    <input type="text" v-model="pAssetStndKoNm" id="pAssetStndKoNm" name="pAssetStndKoNm"class="size-m" v-on:keyup.13="search()">
				</div>
				<div class="form-group col s12 l2">
				    <label for="pServiceType" class="label-type01">태그종류</label>
					<div class="select-group" style="display: flex; align-items: center;">
				        <select class="size-m" v-model="pTagKindCd" name="pTagKindCd" id="pTagKindCd">
				            <option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'GM0120', 'all', '', '', 'CD1')" v-bind:value="item.CD">{{item.CD_NM}}</option>
				        </select>
					</div>	
				</div>
				
				<div class="form-group col s12 l2">
				    <label for="pServiceType" class="label-type01" >정수여부</label>
					<div class="select-group" style="display: flex; align-items: center;">
						<select class="size-m" v-model="pIntAt" name="pIntAt" id="pIntAt">
						    <option value="ALL">-전체-</option>
						    <option value="Y">정수</option>
						    <option value="N">비정수</option>
						</select>
					</div>	
				</div>
			</div>
				
			<div class="row form-row">
				<div class="form-group col s12 l2">
					<label for="pSearchType" class="label-type01" >물품규격변호</label>
					<input type="text" v-model="pAssetStndNo" id="pAssetStndNo" name="pAssetStndNo"  class="size-m" v-on:keyup.13="search()">
				</div>
			</div>
		</div>	
			<div>
			    <div class="col-inline btn-line right" style="display: flex; justify-content: flex-end;">
					<a href="#!" class="btn type02 size-m center-icon" @click="resetFields"><span class="icon-refresh"></span></a> 
					<a href="#!" class="btn type04 size-m left-icon icon-search" @click="search()" style="margin-right: 5px;">조회</a>
					<a href="https://www.g2b.go.kr:8053/main/main.do" target='_blank' class="btn type04 size-m left-icon icon-external-link" style="margin-right: 5px;">목록정보시스템</a>
			    </div>
			</div>
	
			<!-- 테이블 영역 -->
			<section class="row">
				
				<!-- 물품분류조회 테이블 -->
				<div class="form-group col s12 l6">
					<div class="box-type03">
						<div style="display: flex; align-items: center;">
							<div class="col s12 l12" style="flex: 1;">
							    <span class="board-info-txt size-s">총 <span>{{mainListPaging.totalCnt}}</span>건의 게시물이 있습니다. (<span>{{mainListPaging.getCurrentPage()}}</span> / {{mainListPaging.getTotalPage()}})</span>
							</div>
							<div class="col-inline btn-line right">
								<a href="#!" class="btn type04 size-s left-icon icon-more" @click="newRow" style="margin-right: 5px;">입력</a>
								<a href="#!" class="btn type04 size-s left-icon icon-edit" @click="rowCheckClick()" style="margin-right: 5px;">수정</a>
								<a href="#!" class="btn type04 size-s left-icon icon-trashcan" @click="rowCheckUseNot()" style="margin-right: 5px;">삭제</a>
								<a href="#!" class="btn type02 size-s left-icon icon-report" @click="excelDownload()" style="margin-right: 5px;">엑셀</a>
							</div>
						</div>
						<perfect-scrollbar style="max-height: 700px;">
						<table class="table-type01 response" id="datas-reponsive">
							<caption></caption>
							<thead class="thead-fixed">
								<tr>
									<th><input type="checkbox" v-model="selectAll" @change="toggleSelectAll"/></th>
									<th scope="col">No</th>
									<th scope="col">물품분류번호</th>
									<th scope="col">물품명</th>
									<th scope="col">태그종류</th>
									<th scope="col">내용연수</th>
									<th scope="col">정수여부</th>
									<th scope="col">비고</th>
								</tr>
							</thead>
							<tbody v-if="mainList.data.length > 0">
								<tr v-for="(item, index) in mainList.data" v-if="mainList.getRowType(index) != 8" :key="index">
									<td><input type="checkbox" v-model="selectedRows[index]"/></td>
									<td data-header="No" style="text-align: center;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ index + 1 }}</a></td>
									<td data-header="물품분류번호" style="text-align: center;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.ASSET_CL_NO }}</a></td>
									<td data-header="물품명" style="text-align: left;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.ASSET_CL_KO_NM }}</a></td>
									<td data-header="태그종류" style="text-align: center;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.TAG_KIND_NM }}</a></td>
									<td data-header="내용연수" style="text-align: right;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.USE_YYCNT }}</a></td>
									<td data-header="정수여부" style="text-align: center;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.INT_AT_NM }}</a></td>
									<td data-header="비고" style="text-align: left;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.RMK }}</a></td>
								</tr>
							</tbody>
							<tbody v-else>
								<tr>
									<td colspan="100">검색결과가 없습니다.</td>
								</tr>
							</tbody>
						</table>
						</perfect-scrollbar>
						<paging :pagingset="mainListPaging" :type="'normal'"></paging>
					</div>
				</div>
				
				<!-- 규격분류조회 테이블 -->
				<div class="form-group col s12 l6">
					<div class="box-type03">
						<div style="display: flex; align-items: center;">
							<div class="col s12 l12" style="flex: 1;">
							    <span class="board-info-txt size-s">총 <span>{{mainListPaging2.totalCnt}}</span>건의 게시물이 있습니다. (<span>{{mainListPaging2.getCurrentPage()}}</span> / {{mainListPaging2.getTotalPage()}})</span>
							</div>
							<div class="col-inline btn-line right">
								<a href="#!" class="btn type04 size-s left-icon icon-more" @click="newRow" style="margin-right: 5px;">입력</a>
								<a href="#!" class="btn type04 size-s left-icon icon-edit" @click="rowCheckClick()" style="margin-right: 5px;">수정</a>
								<a href="#!" class="btn type04 size-s left-icon icon-trashcan" @click="rowCheckUseNot()" style="margin-right: 5px;">삭제</a>
								<a href="#!" class="btn type02 size-s left-icon icon-report" @click="excelDownload()" style="margin-right: 5px;">엑셀</a>
							</div>
						</div>
						<perfect-scrollbar style="max-height: 700px;">
						<table class="table-type01 response" id="datas-reponsive">
							<caption></caption>
							<thead class="thead-fixed">
								<tr>
									<th><input type="checkbox" v-model="selectAll" @change="toggleSelectAll"/></th>
									<th scope="col">No</th>
									<th scope="col">사용여부</th>
									<th scope="col">물품분류번호</th>
									<th scope="col">물품규격번호</th>
									<th scope="col">규격명</th>
									<th scope="col">비고</th>
								</tr>
							</thead>
							<tbody v-if="mainList2.data.length > 0">
								<tr v-for="(item, index) in mainList2.data" v-if="mainList2.getRowType(index) != 8" :key="index">
									<td><input type="checkbox"/></td>
									<td data-header="No" style="text-align: center;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ index + 1 }}</a></td>
									<td data-header="사용여부" style="text-align: center;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.USE_AT }}</a></td>
									<td data-header="물품분류번호" style="text-align: center;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.ASSET_CL_NO }}</a></td>
									<td data-header="물품규격번호" style="text-align: center;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.ASSET_STND_NO }}</a></td>
									<td data-header="규격명" style="text-align: left;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.ASSET_STND_KO_NM }}</a></td>
									<td data-header="비고" style="text-align: left;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.RMK }}</a></td>
								</tr>
							</tbody>
							<tbody v-else>
								<tr>
									<td colspan="100">검색결과가 없습니다.</td>
								</tr>
							</tbody>
						</table>
						</perfect-scrollbar>
						<paging :pagingset="mainListPaging2" :type="'normal'"></paging>
					</div>
				</div>
			</section>
		</section>
		
		
		<!-- 입력/수정 화면 -->
		<section class="cont_box" v-if="mainList.currentRow">
			<h3 class="h3" v-if="mainList.getRowType(mainList.rowposition) == ROWTYPE_INSERT">물품코드 관리(입력)</h3>
			<h3 class="h3" v-if="mainList.getRowType(mainList.rowposition) == ROWTYPE_NORMAL || mainList.getRowType(mainList.rowposition) == ROWTYPE_UPDATE">물품코드 관리(수정)</h3>
			<div class="box-type04">
				<!--<div class="form-group row">
					<div class="col s12 m12 l5">
						<label class="label-type01 required size-m">상위부서</label>
						<select class="size-m" name="upDeptCd" id="upDeptCd" v-model="mainList.currentRow.UP_DEPT_CD">
							<option v-for="(item, index) in deptCodeSet.data" v-bind:value="item.ORGNZT_ID">{{item.ORGNZT_NM}}</option>
						</select>
					</div>
					
					<div class="col s12 m12 l5">
						<label class="label-type01 required size-m">부서코드</label>
						<input type="text" class="size-m" id="deptCd" name="deptCd" data-vv-as="부서코드" v-model="mainList.currentRow.DEPT_CD" :disabled="mainList.getRowType(mainList.rowposition) !== ROWTYPE_INSERT"/>
					</div>
				</div>

				<div class="form-group row">
					<div class="col s12 m12 l5">
						<label class="label-type01 required size-m">부서명</label>
						<input type="text" class="size-m" id="realDeptNm" name="realDeptNm" data-vv-as="부서명" v-model="mainList.currentRow.REAL_DEPT_NM">
					</div>
					
					<div class="col s12 m12 l5">
						<label class="label-type01 required size-m" for="outputSeq">부서순번</label>
						<input type="text" class="size-m" id="outputSeq" name="outputSeq" data-vv-as="부서순번" v-model="mainList.currentRow.OUTPUT_SEQ">
					</div>
				</div>
			</div>-->
			
				<div class="form-group row">
					<div class="col s12 m12 l2">
						<label class="label-type01 required size-m">물품분류번호</label>
						<input type="text" class="size-m" id="pAssetClNo" name="pAssetClNo" data-vv-as="물품분류번호" v-model="mainList.currentRow.OUTPUT_SEQ">
					</div>
					
					<div class="col s12 m12 l2">
						<label class="label-type01 size-m">태그종류</label>
				        <select class="size-m" v-model="pTagKindCd" name="pTagKindCd" id="pTagKindCd" v-model="mainList.currentRow.UP_DEPT_CD">
				            <option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'GM0120', 'all', '', '', 'CD1')" v-bind:value="item.CD">{{item.CD_NM}}</option>
				        </select>
					</div>

					<div class="col s12 m12 l2">
						<label class="label-type01 required size-m" for="outputSeq">자산구분</label>
						<select class="size-m" v-model="pIntAt" name="pIntAt" id="pIntAt">
							<option v-for="(item, index) in eamCommcode.getCommcode('EAM', 'GM0120', 'all', '', '', 'CD1')" v-bind:value="item.CD">{{item.CD_NM}}</option>
						</select>	
					</div>
					
					<div class="col s12 m12 l2">
						<label class="label-type01 required size-m">내용연수</label>
						<input type="text" class="size-m" id="realDeptNm" name="realDeptNm" data-vv-as="내용연수" v-model="mainList.currentRow.REAL_DEPT_NM">
					</div>
					
					<div class="col s12 m12 l2">
						<label class="label-type01 required size-m">정수여부</label>
						<select class="size-m" v-model="pIntAt" name="pIntAt" id="pIntAt">
						    <option value="ALL">-전체-</option>
						    <option value="Y">정수</option>
						    <option value="N">비정수</option>
						</select>
					</div>
				</div>
				
				<div class="form-group row">
					<div class="col s12 m12 l12">
						<label class="label-type01 required size-m" for="outputSeq">물품명</label>
						<input type="text" class="size-m" id="outputSeq" name="outputSeq" data-vv-as="물품명" v-model="mainList.currentRow.OUTPUT_SEQ">
					</div>
				</div>
				<div class="form-group row">
					<div class="col s12 m12 l12">
						<label class="label-type01 size-m" for="outputSeq">비고</label>
						<input type="text" class="size-m" id="outputSeq" name="outputSeq" data-vv-as="비고" v-model="mainList.currentRow.OUTPUT_SEQ">
					</div>
				</div>
			</div>
			
			<div class="btn-line right">
				<a href="#!" class="btn type02 size-m left-icon icon-checkmark" @click="saveRow">저장</a>
				<a href="#!" class="btn type01 size-m left-icon icon-close" @click="search($event)">닫기</a>
			</div>
		</section>
	
		<modal-message :modalset="messageModal" v-on:messagepoppupcallback="messagePopupCallback"></modal-message>
	
</section>
		
<script type="text/javascript">

/*******************************************************************************************************************************************************************
 * vue start
 ********************************************************************************************************************************************************************/
 var vm = new Vue({
 	el: '#app',
 	
 	//사용할 데이터
 	data: function() {
 		return {
		mainList: new Dataset(),
		mainList2: new Dataset(),
		excelList: new Dataset(),
		initialState: {
			pAssetClNo: '',
			pAssetClKoNm: '',
			pAssetStndKoNm: '',
			pTagKindCd: '',
			pIntAt: 'ALL',
			pAssetStndNo: '',
		},
		pAssetClNo: '',
		pAssetClKoNm: '',
		pAssetStndKoNm: '',
		pTagKindCd: '',
		pIntAt: 'ALL',
		pAssetStndNo: '',
		messageModal: new ModalSet('acqmgmt-modal'),
		mainListPaging: new PagingSet(10,50),
		mainListPaging2: new PagingSet(10,50),
		deptCodeSet: new CustomcodeSet('/amanager/common/dept-list',{}),
		selectAll: false,
		selectedRows: [],
		currentSelectedIndex: null,
		excelData: [],
		};
	},
	
	//생성 될 때
	beforeCreate: function(){
	},
	
	//계산된 속성 포현 시
	computed: {
   
	},
	
	filters: {

	},
	
	//데이터 감시
	watch: {
		'mainList.rowposition': {
			handler: function (val, oldVal) {
				if(this.mainList.enableevent){
					var changeYn = this.mainList.dataCompare(oldVal);
					var rowType = this.mainList.getRowType(val);

					if(!changeYn){
						this.mainList.setDefaultRow(oldVal);
					}

					this.$validator.reset();
				}
			}
		},
		
		'mainList.data': {
			handler: function (val, oldVal) {
				if(this.mainList.enableevent){
					var vm = this;
				  	val.filter( function( data, rowposition ) {
				      	return Object.keys(data).some( function( colNm ) {
				          	var diff = data[colNm] !== vm.mainList.beforeData[rowposition][colNm];
				          	if(diff) {
				          		vm.mainList.beforeData[rowposition][colNm] = data[colNm];
								vm.componentStateChange();
				          	}
				      	})
				  	});
				}
			},
			deep: true
	    },
		
	    'mainListPaging.currentPage': {
			handler: function (val, oldVal) {
				this.setmainList(null, val)
			}
	    },
		
		'mainList2.rowposition': {
			handler: function (val, oldVal) {
				if(this.mainList2.enableevent){
					var changeYn = this.mainList2.dataCompare(oldVal);
					var rowType = this.mainList2.getRowType(val);

					if(!changeYn){
						this.mainList2.setDefaultRow(oldVal);
					}

					this.$validator.reset();
				}
			}
		},
		
		'mainList2.data': {
			handler: function (val, oldVal) {
				if(this.mainList2.enableevent){
					var vm = this;
				  	val.filter( function( data, rowposition ) {
				      	return Object.keys(data).some( function( colNm ) {
				          	var diff = data[colNm] !== vm.mainList2.beforeData[rowposition][colNm];
				          	if(diff) {
				          		vm.mainList2.beforeData[rowposition][colNm] = data[colNm];
								vm.componentStateChange();
				          	}
				      	})
				  	});
				}
			},
			deep: true
	    },
		
	    'mainListPaging2.currentPage': {
			handler: function (val, oldVal) {
				this.setmainList2(null, val)
			}
	    },
		
	},
	//마운트 된 시험수행
	mounted: function(){
		this.setmainList();
		document.addEventListener('keydown', this.handleEscKey);

	},
	
	beforeDestroy() {
		document.removeEventListener('keydown', this.handleEscKey);	
		
	},
	
	//함수
	methods: {
		setmainList: function(e, pPageNo, index){
			if(isNull(e) || e.keyCode == 13 || e.type == 'click'){

				var pAssetClNo 				= $('#pAssetClNo').val();
				var pAssetClKoNm 			= $('#pAssetClKoNm').val();
				var pAssetStndKoNm 			= $('#pAssetStndKoNm').val();
				var pTagKindCd				= $('#pTagKindCd option:selected').val();
				var pIntAt					= $('#pIntAt option:selected').val();
				var pAssetStndNo 			= $('#pAssetStndNo').val();
                var pageNo 					= pPageNo;
                var rowCount 				= this.mainListPaging.getRowCnt();

				if(isNull(pAssetClNo)) 			pAssetClNo 			= '';
				if(isNull(pAssetClKoNm)) 		pAssetClKoNm 		= '';
				if(isNull(pAssetStndKoNm)) 		pAssetStndKoNm 		= '';
				if(isNull(pTagKindCd)) 			pTagKindCd 			= '';
				if(isNull(pIntAt)) 				pIntAt 				= '';
				if(isNull(pAssetStndNo)) 		pAssetStndNo 		= '';
				if(isNull(pageNo)) 				pageNo 				= 1;
				if(isNull(rowCount)) 			rowCount 			= 50;
				
				var param = {
					'pAssetClNo'		: pAssetClNo,
					'pAssetClKoNm'		: pAssetClKoNm,
					'pAssetStndKoNm'	: pAssetStndKoNm,
					'pTagKindCd'		: pTagKindCd,
					'pIntAt'			: pIntAt,
					'pAssetStndNo'		: pAssetStndNo,
					'pPageNo'			: pageNo,
					'pRowCount'			: rowCount
				};
				
				var self = this;
				
				var returnVal = gdsCdMgmtApi.getAssetClList(param, true);	
				
				returnVal.then(function(response) {
					self.mainList.setData(response.data);
					
					if(self.mainList.getRowCount() > 0){
						var totalCnt = self.mainList.data[0].TOTAL_CNT;
						self.mainListPaging.setTotalCnt(totalCnt);
					} else {
						self.mainListPaging.setTotalCnt(0);
					}

				});
			}
		},
		
		setmainList2(index){
				var assetClNo 				= this.mainList.data[index].ASSET_CL_NO;
				var assetStndNo 			= this.mainList.data[index].ASSET_STND_NO;
				var assetStndKoNm 			= this.mainList.data[index].ASSET_STND_KO_NM;
				var assetClKoNm 			= this.mainList.data[index].ASSET_CL_KO_NM;
				var tagKindCd				= this.mainList.data[index].TAG_KIND_CD;
				var intAt					= this.mainList.data[index].INT_AT;
				var pageNo 					= this.mainListPaging2.getCurrentPage();
				var rowCount 				= this.mainListPaging2.getRowCnt();
				
				if(pageNo != 1){
			       this.mainListPaging2.movePage(1);
			   }
				
				if(isNull(assetClNo)) 			assetClNo 			= '';
				if(isNull(assetStndNo)) 		assetStndNo 		= '';
				if(isNull(assetStndKoNm)) 		assetStndKoNm 		= '';
				if(isNull(assetClKoNm)) 		assetClKoNm 		= '';
				if(isNull(tagKindCd)) 			tagKindCd 			= '';
				if(isNull(intAt)) 				intAt 				= '';
				if(isNull(pageNo)) 				pageNo 				= 1;
				if(isNull(rowCount)) 			rowCount 			= 50;
				
				var param = {
					'assetClNo'			: assetClNo,
					'assetStndNo'		: assetStndNo,
					'assetStndKoNm'		: assetStndKoNm,
					'assetClKoNm'		: assetClKoNm,
					'tagKindCd'			: tagKindCd,
					'intAt'				: intAt,
					'pPageNo'			: pageNo,
					'pRowCount'			: rowCount
				};
				
				var self = this;
				
				var returnVal = gdsCdMgmtApi.getAssetStndList(param, true);
				
				returnVal.then(function(response) {
				 	self.mainList2.setData(response.data);
					
					if(self.mainList2.getRowCount() > 0){
						var totalCnt = self.mainList2.data[0].TOTAL_CNT;
						self.mainListPaging2.setTotalCnt(totalCnt);
					} else {
						self.mainListPaging2.setTotalCnt(0);
					}
				});
		},


		/* 일반 조회 */
		search: function(e, pPageNo){
		   var pageNo = this.mainListPaging.getCurrentPage();

		   if(pageNo == 1){
		       this.setmainList(e, pPageNo);
		   } else {
		       this.mainListPaging.movePage(1);
		   }  
		},

		/* DEPT MGMT 리스트 신규행 추가 */
		newRow: function(){
			
			var addObj = {
				
				'UP_DEPT_CD': '',
				'ORGNZT_ID': '',
				'DEPT_NM': '',
				'OUTPUT_SEQ': '',
				'USE_YN': '1',
				'AGENCY_ID': '',

            };

			var newRowPosition = this.mainList.addRow(addObj);
		},
		
		/* DEPT MGMT 리스트 저장,수정 */
		saveRow: function() {
		    /* 폼 입력 검증 */
		    if (!this.mainList.currentRow.UP_DEPT_CD) {
		        this.messageModal.openModal('message', '상위부서 미입력', '상위부서(은/는) 필수 입력 항목입니다.', 'small', '', '');
		        return;
		    }
		    if (!this.mainList.currentRow.DEPT_CD) {
		        this.messageModal.openModal('message', '부서코드 미입력', '부서코드(은/는) 필수 입력 항목입니다.', 'small', '', '');
		        return;
		    }
		    if (!this.mainList.currentRow.REAL_DEPT_NM) {
		        this.messageModal.openModal('message', '부서명 미입력', '부서명(은/는) 필수 입력 항목입니다.', 'small', '', '');
		        return;
		    }
		    if (!this.mainList.currentRow.OUTPUT_SEQ) {
		        this.messageModal.openModal('message', '부서순번 미입력', '부서순번(은/는) 필수 입력 항목입니다.', 'small', '', '');
		        return;
		    }

		    var validate = this.$validator.validateAll();
		    var self = this;

		    validate.then(function(response) {
		        if (response) {
		            /* 부서 중복 체크 */
		            const requestData = {
		                ORGNZT_ID: self.mainList.currentRow.DEPT_CD,
		                DEPT_CD: self.mainList.currentRow.UP_DEPT_CD,
		                ORGNZT_NM: self.mainList.currentRow.REAL_DEPT_NM,
		                OUTPUT_SEQ: self.mainList.currentRow.OUTPUT_SEQ
		            };

		            // 데이터 요청
					deptMgmtApi.checkDeptMgmt(requestData)
					    .then(function(response) {
					        var data = response.data;
					        if (data && data.length > 0 && data[0]) {
					            // ROWTYPE이 UPDATE가 아닐 때만 부서코드에 대한 중복 체크를 수행

				                if (data[0].ORGNZTIDCNT > 0) {
									if (self.mainList.getRowType(self.mainList.rowposition) !== ROWTYPE_UPDATE) {
					                    self.messageModal.openModal('message', '저장 오류', '사용중인 부서코드입니다.', 'middle', '', '');
					                    // 중복 체크 실패 시 메시지만 띄우고 반환
					                    return;
									}
								} else if (data[0].DEPTNMCNT > 0) {
					                self.messageModal.openModal('message', '저장 오류', '사용중인 부서명입니다.', 'middle', '', '');
					                // 부서명 중복 체크 실패 시 메시지만 띄우고 반환
					                return;
					            } else if (data[0].DEPTSEQCNT > 0) {
					                self.messageModal.openModal('message', '저장 오류', '사용중인 부서순번입니다.', 'middle', '', '');
					                // 부서순번 중복 체크 실패 시 메시지만 띄우고 반환
					                return;
					            }
								// 모든 중복 체크 통과 후 저장 로직 실행
								proceedSaving();
								
					        } else {
					            self.messageModal.openModal('message', '유효하지 않은 응답', '입력된 중복 체크값이 유효하지 않습니다.', 'middle', '', '');
					            return;
					        }
					    })
					    .catch(function(error) {
					        console.error('중복 체크 API 호출 중 오류 발생:', error);
					        self.messageModal.openModal('message', '오류 발생', '중복 체크를 수행하는 도중 오류가 발생했습니다.', 'middle', '', '');
					    });
					
					
					function proceedSaving() {
		                // 중복 체크 통과 후 저장 로직 실행
		                var rowposition = self.mainList.rowposition;
		                var checkedIndex = self.selectedRows.findIndex(row => row === true);
		                const selectedRow = self.mainList.data[checkedIndex];
		                var rowType1 = self.mainList.getRowType(rowposition);
		                var rowType2 = self.mainList.getRowType(checkedIndex);
		                var returnVal = null;
	
		                //신규 입력 시 저장
		                if (rowType1 === ROWTYPE_INSERT || rowType2 === ROWTYPE_INSERT) {
		                    returnVal = deptMgmtApi.deptmgmtInsert(self.mainList.currentRow, false);
		                }
		                //수정 시 저장
		                else if (rowType1 === ROWTYPE_UPDATE || rowType2 === ROWTYPE_UPDATE) {
		                    returnVal = deptMgmtApi.deptmgmtUpdate(self.mainList.currentRow, false);
		                } else {
		                    notifySubmit('info', 'DEPT MGMT 저장', '저장할 내역이 없습니다.', 'icon-message');
		                }
	
		                if (!isNull(returnVal)) {
		                    returnVal.then(function(response) {
		                        var data = response.data;
		                        notifySubmit('success', 'DEPT MGMT 저장', '저장이 완료되었습니다.', 'icon-save');
		                        self.setmainList(null, self.mainListPaging.currentPage, 0); 
		                    }).catch(function(error) {
		                        notifySubmit('warning', 'DEPT MGMT 저장', '저장에 실패하였습니다.', 'icon-caution');
		                    });
		                }
					}
		        } else {
		            notifySubmit('warning', 'DEPT MGMT 저장', '입력항목을 확인해주세요.', 'icon-caution');
		        }
	    	});
	    self.resetSelectedRows();
		},
		
		/* DEPT MGMT 미사용(로우단위) */
		useNotRow(deptCd) {
		    var self = this;
		    var index = this.mainList.data.findIndex(row => row.DEPT_CD === deptCd);
		    if (index !== -1) {
		        var rowType = this.mainList.getRowType(index);
		        var returnVal = null;

	            returnVal = deptMgmtApi.deptUseNot(deptCd, true);
	            returnVal.then(function(response) {
	                notifySubmit('success', '미사용 처리', '해당 부서의 미사용 처리가 완료되었습니다.', 'icon-trashcan');
	                self.setmainList(null, self.mainListPaging.currentPage, 0);
					
	            }).catch(function(error) {
	                notifySubmit('warning', '미사용 처리', '미사용 처리에 실패하였습니다.', 'icon-caution');
	            });
		    } else {
		        console.error("유효하지 않은 DEPT_CD입니다.");
		    }
			self.resetSelectedRows();
		},
		
		/* DEPT MGMT 리스트 상태 변경에 따른 컴포넌트 상태변경 */
		componentStateChange: function(){
		},
		
		/* 수정버튼 클릭시 체크박스 선택 상태 확인 */
		rowCheckClick() {
		    const checkedIndex = this.selectedRows.findIndex(row => row === true);
		    if (checkedIndex !== -1) {
		        const selectedRow = this.mainList.data[checkedIndex];
				/* 최상위 부서 수정 불가 */
				if (selectedRow.DEPT_CD == '00') {
					this.messageModal.openModal('message', '최상위 부서', '최상위 부서는 수정할 수 없습니다.', 'middle', '', '');
					return;
				} else {
					this.mainList.setRowType(checkedIndex, this.ROWTYPE_UPDATE);
					this.mainList.rowposition = checkedIndex;
					this.mainList.currentRow = this.mainList.data[checkedIndex];
				}
		    } else {
				this.messageModal.openModal('message', '선택된 부서 없음', '수정할 부서를 선택 해주세요.', 'middle', '', '');
		    }
		},
		
		/* 미사용 버튼 클릭 시 체크박스 선택 및 미사용 여부 상태 확인 */
		rowCheckUseNot() {
			const checkedIndex = this.selectedRows.findIndex(row => row === true);
			if (checkedIndex !== -1) {
				const selectedRow = this.mainList.data[checkedIndex];
				if (selectedRow.USE_YN === '1') {
					if (selectedRow.DEPT_CD == '00') {
						this.messageModal.openModal('message', '최상위 부서', '최상위 부서는 미사용 처리 할 수 없습니다.', 'middle', '', '');
						return;
					} else {
						const selectedDeptCd = [];
						this.selectedRows.forEach((isSelected, index) => {
					        if (isSelected) {
					            const selectedRowData = this.mainList.data[index];
					            if (selectedRowData && selectedRowData.DEPT_CD) {
					                selectedDeptCd.push(selectedRowData.DEPT_CD);
					            }
					        }
					    });
						if (selectedDeptCd.length > 0) {
					        selectedDeptCd.forEach(deptCd => {
								this.messagePopup('ROW_USENOT', deptCd);
					        });
					    }
						
					}
				} else if (selectedRow.USE_YN === '0') {
					this.messageModal.openModal('message', '미사용 처리 완료', '이미 미사용 처리가 완료된 부서입니다.', 'middle', '', '');
				}
			} else {
				this.messageModal.openModal('message', '선택된 부서 없음', '미사용 처리 할 부서를 선택 해주세요.', 'middle', '', '');
			}
		},
		
		/* 특정 Row 더블클릭시 수정창 [index값 기준] open */
		rowDbClick: function(index){
			var nRowType = this.mainList.setRowType(0, this.ROWTYPE_UPDATE);
			const selectedRow = this.mainList.data[index];

			/* 최상위 부서 수정 불가 */			
			if (selectedRow.DEPT_CD == '00') {
				this.messageModal.openModal('message', '최상위 부서', '최상위 부서는 수정할 수 없습니다.', 'middle', '', '');
				return;
			}
			if (!selectedRow) {
				console.error("선택된 행이 유효하지 않습니다.");
				return;
			}
			this.mainList.selectRow(index);
		},
		
		/* 메세지창 띄우기 */
        messagePopup: function(pId, pData) {
			console.log('messagePopup 호출됨', pId, pData); // 디버깅용 로그
            var title = '확인';
            var cont = '해당 작업을 수행하시겠습니까?';
            var pGb = 'confirm';

            switch(pId) {
				case 'ROW_USENOT':
	    			title = '선택 및 적용';
					cont = '선택된 부서를 미사용 처리하시겠습니까?'
		            break;
	    	}

	    	this.messageModal.openModal(pGb, title, cont, 'middle', pId, pData);
        },
		
		/* 메시지 콜백 */
	    messagePopupCallback: function(pGb, pId, pData) {
	    	if(pGb!='confirm') return;

	    	switch(pId) {
				case 'ROW_USENOT':
					this.useNotRow(pData);
                    break;
	    	}
	    },
		
		/* 검색조건 초기화 */
		resetFields() {
            Object.assign(this.$data, JSON.parse(JSON.stringify(this.initialState)));
        },
		
		resetModalFields() {
            Object.assign(this.$data, JSON.parse(JSON.stringify(this.initialModalState)));
        },
		
		/* 모달 레이어 팝업 Close */
		closeModal(event) {
			if (!this.mainList.currentRow) {
				modal_close('assetSearchModal');
				this.search(event);
		    } else {
		      modal_close('assetSearchModal');
		    }
		},
		
		/* 체크박스 선택시 데이터 저장*/
		toggleRowSelection(index) {
			if (this.selectedRows.includes(index)) {
				this.selectedRows = this.selectedRows.filter(i => i !== index);
				this.mainList.deselectRow(index);
			} else {
				this.selectedRows.push(index);
				this.mainList.selectRow(index);
		    }
		},
		
		/* 프로세스 적용 후 체크 선택 해제 */
		resetSelectedRows() {
		    this.selectedRows = [];
		    this.selectAll = false;
		},
		
		/* 체크박스 토글 */
		toggleCheckbox(index) {
			// 현재 선택되어있는 행이 존재할 시
			if (this.currentSelectedIndex !== null && this.currentSelectedIndex !== index) {
		        // 이전에 선택된 행의 체크를 해제
		        this.$set(this.selectedRows, this.currentSelectedIndex, false);
		      }
			
			this.$set(this.selectedRows, index, !this.selectedRows[index]);
			this.currentSelectedIndex = index;  // 현재 선택된 인덱스를 업데이트
			this.setmainList2(index);
		},
		
		/* 모든 체크박스 토글  */
		toggleSelectAll() {
	      this.selectedRows = this.mainList.data.map(() => this.selectAll);
	    },
		
		/* ESC 버튼 다운시 핸들러 */
		handleEscKey(event) {
			if (event.key === 'Escape' || event.key === 'Esc') {
				this.closeModal(event);
			}
		},
		
		/* 엑셀 다운로드 */		
		excelDownload() {
		    
		},
	}
});
/*******************************************************************************************************************************************************************
 * vue end
 ********************************************************************************************************************************************************************/


/*******************************************************************************************************************************************************************
 * javascript start
 ********************************************************************************************************************************************************************/

function handleNullValues(row) {
     Object.keys(row).forEach(function(key) {
         if (row[key] === '') {
             row[key] = null;
         }
     });
     return row;
}
 
/*******************************************************************************************************************************************************************
 * javascript end
 ********************************************************************************************************************************************************************/
	
</script>

<!--*******************************************************************************************************************************************************************
 * style start
 *******************************************************************************************************************************************************************-->
 
<style>
	.thead-fixed {
		position: sticky;
	    top: 0;
	    z-index: 1;
	    background-color: #FFF;
	}
	
	.sub_cont_wrap {
	    width:97%;
	    margin: 0 auto;
	    margin-top: 40px;
	    margin-bottom: 60px;
	}
	
	.sub_cont_wrap .sub_cont_box {
		padding: 20px;
		margin-bottom: 0px;
	}
	
	.row .col.l2 {
		width: 20%;
		margin-left: auto;
		left: auto;
		right: auto
	}
	   
    .row .col.l4 {
		width: 40%;
		margin-left: auto;
		left: auto;
		right: auto
	}
	   
    .row .col.l5 {
		width: 50%;
		margin-left: auto;
		left: auto;
		right: auto
	}   
	   
/*	.row .col.l6 {
		width: 60%;
		margin-left: auto;
		left: auto;
		right: auto
	}*/
	   
	th, td {
		white-space: nowrap; /* 텍스트 줄바꿈 방지 */
		overflow: hidden; /* 넘치는 텍스트 숨김 */
		text-overflow: ellipsis; /* 넘치는 텍스트에 "..." 표시 */
    }
	
</style>

<!--*******************************************************************************************************************************************************************
 * style end
 *******************************************************************************************************************************************************************-->
