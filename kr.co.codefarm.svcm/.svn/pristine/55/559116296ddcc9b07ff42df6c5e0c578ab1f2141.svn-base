<script type="text/javascript" src="/app-assets/js/api/amanager/useratymgmt.api.js"></script>
<script type="text/javascript" src="/app-assets/js/api/amanager/commonsearch.api.js"></script>
<h3 style="margin-top:-20px;">자산관리 설정 > 설정 > 내부시스템관리 > <strong>사용자관리</strong></h3>
<section class="sub_cont_box" id="app" style="margin-top:10px;">
	<section class="cont_box" v-if="!mainList.currentRow">
		<div class="box-type03">
			<div class="row form-row">
				<div class="form-group col s12 l2">
					<label for="pServiceType" class="label-type01">부서</label> 
					<div class="select-group" style="display: flex; align-items: center;">   
						<select class="size-m" v-model="pTreeDeptCd" name="pTreeDeptCd" id="pTreeDeptCd">
							<option v-for="(item, index) in deptCodeSet.data" :value="item.ORGNZT_ID">{{item.ORGNZT_NM}}</option>
						</select>
						<button type="button" class="btn type02 size-s" @click="openModal('deptTreeModal');" style="width: 20px; display: flex; justify-content: center; align-items: center;">
							<span class="icon icon-search"></span>
						</button>
					</div>
				</div>
				<div class="form-group col s12 l2">
					<label for="pSearchType" class="label-type01">사용자ID</label>
					<input type="text" v-model="pEmplyrId" id="pEmplyrId" name="pEmplyrId" class="size-m" v-on:keyup.13="search()">
				</div>
				<div class="form-group col s12 l2">
					<label for="pSearchType" class="label-type01" >사용자명</label>
					<input type="text" v-model="pUserNm" id="pUserNm" name="pUserNm" class="size-m" v-on:keyup.13="search()">
				</div>
				<div class="form-group col s12 l2">
					<label class="label-type01" for="pEmplyrSttusCode">사용여부</label>
					<select class="size-m" name="pEmplyrSttusCode" id="pEmplyrSttusCode" v-model="pEmplyrSttusCode">
						<option value="ALL">-전체-</option>
						<option value="P">사용</option>
						<option value="R">미사용</option>
					</select>
				</div>
			</div>
		</div>
		
		<div style="display: flex; align-items: center;">
			<div class="col s12 l12" style="flex: 1;">
				<span class="board-info-txt size-m">총 <span>{{mainListPaging.totalCnt}}</span>건의 게시물이 있습니다. (<span>{{mainListPaging.getCurrentPage()}}</span> / {{mainListPaging.getTotalPage()}})</span>
			</div>
			<div class="col-inline btn-line right" style="display: flex; justify-content: flex-end;">
				<a href="#!" class="btn type02 size-m center-icon" @click="resetFields"><span class="icon-refresh"></span></a>
				<a href="#!" class="btn type04 size-m left-icon icon-search" @click="search()" style="margin-right: 5px;">조회</a>
				<a href="#!" class="btn type04 size-m left-icon icon-more" @click="newRow" style="margin-right: 5px;">입력</a>
				<a href="#!" class="btn type04 size-m left-icon icon-edit" @click="rowCheckClick()" style="margin-right: 5px;">수정</a>
				<a href="#!" class="btn type02 size-m left-icon icon-report" @click="excelDownload()" style="margin-right: 5px;">엑셀</a>
			</div>
		</div>
		
		<!-- 테이블 영역 -->
		<div class="box-type03">
			<div class="col s12 m12 xl12">
				<div class="table-type01-wrap">
					<perfect-scrollbar style="max-height: 450px;">
						<table class="table-type01 response" id="datas-reponsive">
							<caption></caption>
							<thead class="thead-fixed">
								<tr>
									<th><input type="checkbox" v-model="selectAll" @change="toggleSelectAll" /></th>
									<th scope="col">No</th>
									<th scope="col" @click="sort('ORGNZT_NM')" class="sortable"><span :class="sortIcon('ORGNZT_NM')"></span>부서</th>
									<th scope="col" @click="sort('EMPLYR_ID')" class="sortable"><span :class="sortIcon('EMPLYR_ID')"></span>아이디</th>
									<th scope="col" @click="sort('USER_NM')" class="sortable"><span :class="sortIcon('USER_NM')"></span>사용자명</th>
									<th scope="col" @click="sort('EMPLYR_STTUS_NM')" class="sortable"><span :class="sortIcon('EMPLYR_STTUS_NM')"></span>사용여부</th>
									<th scope="col" @click="sort('OFFM_TELNO')" class="sortable"><span :class="sortIcon('OFFM_TELNO')"></span>내선전화</th>
								</tr>
							</thead>
							<tbody v-if="sortedData.length > 0">
								<tr v-for="(item, index) in sortedData" v-if="mainList.getRowType(index) != 8" :key="index">
									<td><input type="checkbox" :value="index" v-model="selectedRows[index]" /></td>
									<td data-header="No" style="text-align: center;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ index + 1 }}</a></td>
									<td data-header="부서" style="text-align: left;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.ORGNZT_NM }}</a></td>
									<td data-header="아이디" style="text-align: left;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.EMPLYR_ID }}</a></td>
									<td data-header="사용자명" style="text-align: left;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.USER_NM }}</a></td>
									<td data-header="사용여부" style="text-align: center;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.EMPLYR_STTUS_NM }}</a></td>
									<td data-header="내선전화" style="text-align: left;"><a href="#!" @click="toggleCheckbox(index)" @dblclick="rowDbClick(index)">{{ item.OFFM_TELNO }}</a></td>
								</tr>
							</tbody>
							<tbody v-else>
								<tr>
									<td colspan="100">검색결과가 없습니다.</td>
								</tr>
							</tbody>
						</table>
					</perfect-scrollbar>
				</div>
			
				<!-- 페이지당 Row 선택 드랍다운 메뉴 -->
				<div class="col s12 l6" style="display: flex; align-items: center; justify-content: flex-end; margin-top: 10px;">
					<div class="col s3" style="margin-top: -2px;">
						<select class="size-s" v-model="pageSize" @change="changePageSize" name="pageSize" id="pageSize">
							<option v-for="sizeOption in pageSizes" :value="sizeOption">{{ sizeOption }} 건</option>
						</select>
					</div>
					<span style="margin-left: 10px; margin-bottom: 0;">/ 페이지당</span>
				</div>
				<paging :pagingset="mainListPaging" :type="'normal'" style="margin-top: -10px;"></paging>
			</div>
		</div>
	</section>
	
	<!-- 입력/수정 화면 -->
		<section class="cont_box" v-if="mainList.currentRow">
			<h3 class="h3" v-if="mainList.getRowType(mainList.rowposition) == ROWTYPE_INSERT">사용자 관리(입력)</h3>
			<h3 class="h3" v-if="mainList.getRowType(mainList.rowposition) == ROWTYPE_NORMAL || mainList.getRowType(mainList.rowposition) == ROWTYPE_UPDATE">사용자 관리(수정)</h3>
			<div class="box-type04">
				<div class="form-group row">
					<div class="col s12 m12 l2">
						<label class="label-type01 required size-m">부서</label>
						<select class="size-m" name="orgnztId" id="orgnztId" v-model="mainList.currentRow.ORGNZT_ID">
							<option v-for="(item, index) in deptCodeSet.data" v-bind:value="item.ORGNZT_ID">{{item.ORGNZT_NM}}</option>
						</select>
					</div>
					<div class="col s12 m12 l2">
						<label class="label-type01 required size-m">사용자ID</label>
						<input type="text" class="size-m" id="emplyrId" name="emplyrId" data-vv-as="사용자ID" v-model="mainList.currentRow.EMPLYR_ID" :disabled="mainList.getRowType(mainList.rowposition) !== ROWTYPE_INSERT">
					</div>
					<div class="col s12 m12 l2">
						<label class="label-type01 required size-m" for="outputSeq">사용자명</label>
						<input type="text" class="size-m" id="userNm" name="userNm" data-vv-as="사용자명" v-model="mainList.currentRow.USER_NM">
					</div>
					<div class="col s12 m12 l2">
						<label class="label-type01 size-m">내선전화</label>
						<input type="text" class="size-m" id="offmTelno" name="offmTelno" data-vv-as="내선전화" v-model="mainList.currentRow.OFFM_TELNO">
					</div>
					
					<div class="col s12 m12 l2">
						<label class="label-type01 required size-m" for="emplyrSttusCode">사용여부</label>
						<select class="size-m" name="emplyrSttusCode" id="emplyrSttusCode" v-model="mainList.currentRow.EMPLYR_STTUS_CODE">
							<option value="P">사용</option>
							<option value="R">미사용</option>
						</select>
					</div>
				</div>
			</div>
			
			<div class="btn-line right">
				<a href="#!" class="btn type02 size-m left-icon icon-checkmark" @click="saveRow">저장</a>
				<a href="#!" class="btn type01 size-m left-icon icon-close" @click="search($event)">닫기</a>
			</div>
		</section>
		<modal-message :modalset="messageModal" v-on:messagepoppupcallback="messagePopupCallback"></modal-message>
		
		<!-- 부서 검색 모달 레이어 팝업 -->
		<div class="modal-layer-wrap">
			<div id="deptTreeModal" class="modal-layer modal">
				<div class="modal-container">
					<div class="modal-header">
						<p class="modal-title">부서검색</p>
					</div>
					<section class="sub_cont_box" style="min-height: 700px;">
						<div class="box-type03" style="height: auto; padding: 10px;">
							<div class="modal-content" style="padding: 10px;">
								<div class="row form-row" style="margin: 0;">
									<div class="form-group col s12 l5">
										<label for="pModalDeptNm" class="label-type01">부서명</label>
										<div class="input-group" style="display: flex; align-items: center;">   
											<input type="text" v-model="pModalDeptNm" id="pModalDeptNm" name="pModalDeptNm" class="size-m" v-on:keyup.13="searchDeptModal()">
											<button type="button" class="btn type02 size-s" @click="searchDeptModal()" style="width: 20px; display: flex; justify-content: center; align-items: center;">
												<span class="icon icon-search"></span>
											</button>
										</div>
									</div>
								</div>
							</div>
						</div>
						
						<div class="box-type04">
							<perfect-scrollbar style="max-height: 430px;">
								<div class="col s12 m12 xl12">
									<div v-if="deptTreeData.length === 0">
										<span>검색 결과가 없습니다. 검색어를 확인 후 다시 검색해주세요.</span>
									</div>
									<div v-else>
										<dept-tree :nodes="deptTreeData" :selectedNode.sync="selectedNode" v-model="selectedNodeId"></dept-tree>
									</div>
								</div>
							</perfect-scrollbar>
						</div>
						
						<div style="display: flex; justify-content: flex-end; align-items: center; max-height:50px;">
							<div class="col-inline btn-line right" style="display: flex; justify-content: flex-end;">
								<a href="#!" class="btn type02 size-m center-icon" @click="resetModalFields"><span class="icon-refresh"></span></a>
								<a href="#!" class="btn type04 size-m left-icon icon-search" @click="searchDeptModal()" style="margin-right: 5px;">조회</a>
								<a href="#!" class="btn type04 size-m left-icon icon-checkmark" @click="confirmDeptTreeModal()" style="margin-right: 5px;">선택</a>
								<a href="#!" class="btn type04 size-m left-icon icon-close " @click.prevent="closeModal('deptTreeModal')" style="margin-right: 5px;">닫기</a>
							</div>
						</div>
					</section>
				</div>
			</div>
		</div>
	</section>

	<template id="dept-tree-template">
		<ul class="dept-tree">
			<li v-for="node in nodes" :key="node.id">
				<div class="dept-node"
					:class="{'selected': node.selected, 'has-children': node.children && node.children.length > 0, 'open': node.open}"
					@click="toggle(node)">
					<input type="checkbox" v-model="node.selected" @change="selectNode(node)" style="margin-right: 5px;" />
					<i v-if="node.children && node.children.length" :class="{ 'open': node.open }"
						@click.stop="toggle(node)"></i> {{ node.text }}
				</div>
				<ul v-if="node.open && node.children && node.children.length > 0" class="sub-tree">
					<dept-tree v-for="childNode in node.children" :key="childNode.id" :nodes="[childNode]"
						:selectedNode.sync="selectedNode"></dept-tree>
				</ul>
			</li>
		</ul>
	</template>
<script type="text/javascript">

/*******************************************************************************************************************************************************************
 * vue start
 ********************************************************************************************************************************************************************/
 Vue.component('dept-tree', {
 	template: '#dept-tree-template',
 	props: {
 		nodes: Array,
 		selectedNode: String // 선택된 노드의 ID를 문자열로 받음
 	},
 	data() {
 		return {
 			selectedId: null // 초기값으로 null 설정
 		};
 	},
 	computed: {
 		// 선택된 노드의 id에 따라 클래스를 동적으로 반환
 		nodeClass() {
 			return (node) => ({
 				'selected': this.selectedId === node.id,
 				'has-children': node.children && node.children.length > 0,
 				'open': node.open
 			});
 		}
 	},
 	methods: {
 		toggle(node) {
 			Vue.set(node, 'open', !node.open);
 			// 부모 노드가 닫힌 상태일 때 자식 노드의 open 상태 초기화
 			if (!node.open) {
 				this.closeChildren(node);
 			}
 		},
 		
 		selectNode(node) {
 			// 다른 체크박스들의 선택 상태를 해제
 			this.nodes.forEach(n => {
 				if (n !== node) {
 					Vue.set(n, 'selected', false);
 				}
 			});
 		},
 		
 		closeChildren(parentNode) {
 			// 모든 자식 노드의 open 상태를 false로 설정
 			parentNode.children.forEach(child => {
 				Vue.set(child, 'open', false);
 				this.closeChildren(child); // 자식 노드도 재귀적으로 닫기
 			});
 		}
 	},
 	watch: {
 		nodes: {
 			handler(newValue, oldValue) {
 				// 체크된 노드의 ID 출력 및 selectedNode에 저장
 				newValue.forEach(node => {
 					if (node.selected) {
 						this.selectedId = node.id;
 					}
 				});
 				// 선택된 노드의 ID를 부모 컴포넌트로 전달
 				this.$emit('input', this.selectedId); // 선택된 노드의 ID를 부모 컴포넌트로 전달
 			},
 			deep: true // 객체의 내부까지 깊게 감시
 		},
 	}
 });
 
 var vm = new Vue({
	el: '#app',

	/* 사용할 데이터 Set */
	data: function() {
		return {
			mainList: new Dataset(),
			assetmodalList: new Dataset(),
			initialState: {
				pTreeDeptCd: '00',
				pEmplyrId: '',
				pUserNm: '',
				pAuthorCode: 'ALL',
				pEmplyrSttusCode: 'ALL',
			},
			initialModalState: {
				pModalDeptNm: '',
				pModalDeptCd: '',
				pModalUpDeptCd: '',
			},
			sortKey: '',
			sortOrders: {
				ORGNZT_NM: 0,
				EMPLYR_ID: 'DESC',
				USER_NM: 0,
				EMPLYR_STTUS_NM: 0,
				OFFM_TELNO: 0,
				AUTHOR_NM: 0,
			},
			pTreeDeptCd: '00',
			pEmplyrId: '',
			pUserNm: '',
			pAuthorCode: 'ALL',
			pEmplyrSttusCode: 'ALL',
			pModalDeptNm: '',
			pModalDeptCd: '',
			pModalUpDeptCd: '',
			messageModal: new ModalSet('acqmgmt-modal'),
			mainListPaging: new PagingSet(10, 100),
			pageSizes: [100, 300, 500, 1000, 5000],
			pageSize: 100,
			size: 100,
			assetmodalListPaging: new PagingSet(10, 100),
			deptCodeSet: new CustomcodeSet('/amanager/common/dept-list', {}),
			authorCodeSet: new CustomcodeSet('/amanager/useratymgmt/AuthorCode-list', {}),
			selectAll: false,
			selectedRows: [],
			isSectionVisible: false,
			excelData: [],
			deptTreeData: [],
			selectedNodes: [],
			selectedNode: '',
			selectedNodeId: '',
		};
	},

	/* 생성 될 때 */
	beforeCreate: function () {
	},

	/* 계산된 속성 표현 시 */
	computed: {
		formattedBuyDt: {
			get() {
				return this.dateFormatter(this.mainList.currentRow.BUY_DT);
			},
			set(value) {
				this.mainList.currentRow.BUY_DT = value.replace(/-/g, '');
			}
		},

		formattedAcqArngDt: {
			get() {
				return this.dateFormatter(this.mainList.currentRow.ACQ_ARNG_DT);
			},
			set(value) {
				this.mainList.currentRow.ACQ_ARNG_DT = value.replace(/-/g, '');
			}
		},

		formattedBuyUprice: {
			get() {
				return this.numberFormatter(this.mainList.currentRow.BUY_UPRICE);
			},
			set(value) {
				this.mainList.currentRow.BUY_UPRICE = value.replace(/,/g, '');
			}
		},
		
		/* 테이블 정렬 추적 */
		sortedData() {
			if (this.sortKey) {
				return this.mainList.data.slice().sort((a, b) => {
					let result = 0;
					if (a[this.sortKey] > b[this.sortKey]) {
						result = 1;
					} else if (a[this.sortKey] < b[this.sortKey]) {
						result = -1;
					}
					return result * (this.sortOrders[this.sortKey] === 'ASC' ? 1 : -1);
				});
			} else {
				return this.mainList.data;
			}
		}
	},

	filters: {
		dateFormatter: function (value) {
			if (!value) return '';
			return value.replace(/(\d{4})(\d{2})(\d{2})/g, '$1-$2-$3');
		}
	},

	/* 데이터 감시 */
	watch: {
		/* 메인 화면 설정 */
		'mainList.rowposition': {
			handler: function (val, oldVal) {
				if (this.mainList.enableevent) {
					var changeYn = this.mainList.dataCompare(oldVal);
					var rowType = this.mainList.getRowType(val);
					if (!changeYn) {
						this.mainList.setDefaultRow(oldVal);
					}
					this.$validator.reset();
				}
			}
		},

		'mainList.data': {
			handler: function (val, oldVal) {
				if (this.mainList.enableevent) {
					var vm = this;
					val.filter(function (data, rowposition) {
						return Object.keys(data).some(function (colNm) {
							var diff = data[colNm] !== vm.mainList.beforeData[rowposition][colNm];
							if (diff) {
								vm.mainList.beforeData[rowposition][colNm] = data[colNm];
								vm.componentStateChange();
							}
						})
					});
				}
			},
			deep: true
		},

		'mainListPaging.currentPage': {
			handler: function (val, oldVal) {
				this.setmainList(null, val)
			}
		},
	},

	/* 마운트 된 시험수행 */
	mounted: function () {
		this.setmainList();
		document.addEventListener('keydown', this.handleEscKey);
	},

	beforeDestroy() {
		document.removeEventListener('keydown', this.handleEscKey);
	},

	/* 함수 */
	methods: {
		/* 메인 화면 set */
		setmainList: function (e, pPageNo, isExcelDownload, callback) {
			if (isNull(e) || e.keyCode == 13 || e.type == 'click' && isExcelDownload == 0) {
				var pTreeDeptCd = $('#pTreeDeptCd option:selected').val();
				var pEmplyrId = $('#pEmplyrId').val();
				var pUserNm = $('#pUserNm').val();
				var pAuthorCode = $('#pAuthorCode').val();
				var pEmplyrSttusCode = $('#pEmplyrSttusCode').val();
				var pageNo = pPageNo;
				var rowCount = this.mainListPaging.getRowCnt();

				if (isNull(pTreeDeptCd)) pTreeDeptCd = '';
				if (isNull(pEmplyrId)) pEmplyrId = '';
				if (isNull(pUserNm)) pUserNm = '';
				if (isNull(pAuthorCode)) pAuthorCode = '';
				if (isNull(pEmplyrSttusCode)) pEmplyrSttusCode = '';
				if (isNull(pageNo)) pageNo = 1;
				if (isNull(rowCount)) rowCount = 100;
				
				if (isExcelDownload == 1) {
					rowCount = 9999;
				}
				var param = {
					'pTreeDeptCd': pTreeDeptCd,
					'pEmplyrId': pEmplyrId,
					'pUserNm': pUserNm,
					'pAuthorCode': pAuthorCode,
					'pEmplyrSttusCode': pEmplyrSttusCode,
					'pPageNo': pageNo,
					'pRowCount': rowCount
				};
				
				var self = this;
				var returnVal = useratyMgmtApi.getUsrAtyMgmtList(param, true);
				returnVal.then(function (response) {
					self.mainList.setData(response.data);
					self.excelData = response.data;
					if (self.mainList.getRowCount() > 0) {
						var totalCnt = self.mainList.data[0].TOTAL_CNT;
						self.mainListPaging.setTotalCnt(totalCnt);
					} else {
						self.mainListPaging.setTotalCnt(0);
					}
					if (typeof callback === "function") {
						callback();
					}
				});
			}
		},

		/*  페이지 당 Row 선택 */
		changePageSize: function () {
			this.mainListPaging.setRowCnt(this.pageSize);
			this.setmainList(null, 1);
		},
		
		/*
		#### 부서 검색 모달 관련 method####
		 */
		
		/* 모달 오픈 */
		openModal(modalId) {
			modal_open(modalId);
			this.resetModalFields();
			this.searchDeptModal();
		},
		
		/* 트리 구조 생성 */
		buildTree(data) {
			let tree = [];
			let lookup = {};

			// 데이터 각 항목에 대해 변환을 준비
			data.forEach(item => {
				lookup[item.id] = {...item, children: [], selected: false};
			});

			// 트리 구조를 만듦
			data.forEach(item => {
				if (item.parent === '##' || !item.parent) {
					tree.push(lookup[item.id]);
				} else {
					// 부모 항목이 존재하는지 확인
					if (lookup[item.parent]) {
						const parent = lookup[item.parent];
						if (!parent.children.some(child => child.id === item.id)) {
							parent.children.push(lookup[item.id]);
						}
					} else {
						console.warn(`Parent ID ${item.parent} not found for item ID ${item.id}`);
					}
				}
			});
			return tree;
		},
		
		/* 부서 선택 후 적용 클릭 시 */
		confirmDeptTreeModal() {
			// 메인화면
			if (this.selectedNodeId && !this.mainList.currentRow) {
				this.pTreeDeptCd = this.selectedNodeId;
			// 입력 or 수정화면
			} else if (this.selectedNodeId && this.mainList.currentRow) {
				this.mainList.currentRow.UP_DEPT_CD = this.selectedNodeId;
			} else {
				// 선택된 노드가 없을 경우 기본 값으로 설정
				this.pTreeDeptCd = '00';
			}
			modal_close('deptTreeModal');
		},
		
		/* 이벤트 핸들러: 부모 컴포넌트에서 선택된 노드 ID 업데이트 */
		updateSelectedNodeId(nodeId) {
			this.selectedNodeId = nodeId;
		},
		
		/*
		#### 부서 검색 모달 관련 method####
		 */
		 
		/* 일반 조회 */
		search: function (e, pPageNo) {
			var pageNo = this.mainListPaging.getCurrentPage();

			if (pageNo == 1) {
				this.setmainList(e, pPageNo, 0);
			} else {
				this.mainListPaging.movePage(1);
			}
		},

		/* 부서 검색 모달 조회 */
		searchDeptModal() {
			// Axios를 사용한 부서 검색 API 요청
			axios.get('/amanager/common/depttree-list', {
				params: {
					pDeptNm: this.pModalDeptNm,
				}
			}).then(response => {
				this.deptTreeData = this.buildTree(response.data);
			});
		},

		/* ACQ MGMT 리스트 신규행 추가 */
		newRow: function () {
			var addObj = {
				'EMPLYR_ID': '',
				'ORGNZT_ID': '00',
				'USER_NM': '',
				'PASSWORD': '',
				'OFFM_TELNO': '',
				'PSTINST_CODE': '',
				'EMPLYR_STTUS_CODE': 'P',
				'ESNTL_ID': '',
				'SBSCRB_DE': '',
				'AGENCY_ID': '',
			};
			var newRowPosition = this.mainList.addRow(addObj);
		},

		/* ACQ MGMT 리스트 저장,수정 */
		saveRow: function () {

			// 폼 입력 검증
			if (!this.mainList.currentRow.ORGNZT_ID) {this.messageModal.openModal('message', '부서 미입력', '부서(은/는) 필수 입력 항목입니다.', 'small', '', ''); return;}
			if (!this.mainList.currentRow.EMPLYR_ID) {this.messageModal.openModal('message', '사용자ID 미입력', '사용자ID(은/는) 필수 입력 항목입니다.', 'small', '', ''); return;}
			if (!this.mainList.currentRow.USER_NM) {this.messageModal.openModal('message', '사용자명 미입력', '사용자명(은/는) 필수 입력 항목입니다.', 'small', '', ''); return;}
			if (!this.mainList.currentRow.EMPLYR_STTUS_CODE) {this.messageModal.openModal('message', '사용여부 미입력', '사용여부(은/는) 필수 입력 항목입니다.', 'small', '', ''); return;}

			var validate = this.$validator.validateAll();
			var self = this;

			validate.then(function (response) {
				if (response) {
					var rowposition = self.mainList.rowposition;
					var checkedIndex = self.selectedRows.findIndex(row => row === true);
					const selectedRow = self.mainList.data[checkedIndex];
					var rowType1 = self.mainList.getRowType(rowposition);
					var rowType2 = self.mainList.getRowType(checkedIndex);
					var returnVal = null;

					//신규 입력 시 저장
					if (rowType1 == ROWTYPE_INSERT || rowType2 == ROWTYPE_INSERT) {
						returnVal = useratyMgmtApi.insertUsrMgmt(self.mainList.currentRow, false);
					//수정 시 저장
					} else if (rowType1 == ROWTYPE_UPDATE || rowType2 == ROWTYPE_UPDATE) {
						returnVal = useratyMgmtApi.updateUsrMgmt(self.mainList.currentRow, false);
					} else {
						notifySubmit('info', 'USERATYMGMT 저장', '저장할 내역이 없습니다.', 'icon-message');
					}

					if (!isNull(returnVal)) {
						returnVal.then(function (response) {
							var data = response.data;
							notifySubmit('success', 'USERATYMGMT 저장', '저장이 완료되었습니다.', 'icon-save');
							self.setmainList(null, self.mainListPaging.currentPage, 0);
						}).catch(function (error) {
							notifySubmit('warning', 'USERATYMGMT 저장', '저장에 실패하였습니다.', 'icon-caution');
						});
					}
				} else {
					notifySubmit('warning', 'USERATYMGMT 저장', '입력항목을 확인해주세요.', 'icon-caution');
				}
			});
			self.resetSelectedRows();
		},

		/* ACQ MGMT 리스트 상태 변경에 따른 컴포넌트 상태변경 */
		componentStateChange: function () {
		},

		/* 수정버튼 클릭시 체크박스 선택 상태 확인 */
		rowCheckClick() {
			const checkedIndex = this.selectedRows.findIndex(row => row === true);
			if (checkedIndex !== -1) {
				const selectedRow = this.mainList.data[checkedIndex];
				this.mainList.setRowType(checkedIndex, this.ROWTYPE_UPDATE);
				this.mainList.rowposition = checkedIndex;
				this.mainList.currentRow = this.mainList.data[checkedIndex];
			} else {
				this.messageModal.openModal('message', '선택된 사용자 없음', '수정할 사용자를 선택 해주세요.', 'middle', '', '');
			}
		},

		/* 특정 Row 더블클릭시 수정창 [index값 기준] open */
		rowDbClick: function (index) {
			var nRowType = this.mainList.setRowType(0, this.ROWTYPE_UPDATE);
			const selectedRow = this.mainList.data[index];
			// index값 확인
			if (!selectedRow) {
				console.error("선택된 행이 유효하지 않습니다.");
				return;
			}
			this.mainList.selectRow(index);
		},

		/* 메세지창 띄우기 */
		messagePopup: function (pId, pData) {
			console.log('messagePopup 호출됨', pId, pData); // 디버깅용 로그
			var title = '확인';
			var cont = '해당 작업을 수행하시겠습니까?';
			var pGb = 'confirm';

			switch (pId) {
			}
			this.messageModal.openModal(pGb, title, cont, 'middle', pId, pData);
		},

		/* 메시지 콜백 */
		messagePopupCallback: function (pGb, pId, pData) {
			if (pGb != 'confirm') return;

			switch (pId) {
			}
		},

		/* 검색조건 초기화 */
		resetFields() {
			Object.assign(this.$data, JSON.parse(JSON.stringify(this.initialState)));
		},
		
		/* 모달 검색조건 초기화 */
		resetModalFields() {
			Object.assign(this.$data, JSON.parse(JSON.stringify(this.initialModalState)));
		},
		
		/* 모달 레이어 팝업 Close */
		closeModal(modalId) {
			if (!this.mainList.currentRow) {
				modal_close(modalId);
				this.resetModalFields();
			} else {
				modal_close(modalId);
				this.resetModalFields();
			}
			if (modalId == 'ESC') {
				modal_close('assetSearchModal');
				modal_close('userSearchModal');
				this.messageModal.closeModal()
			}
		},

		/* 체크박스 선택시 데이터 저장*/
		toggleRowSelection(index) {
			if (this.selectedRows.includes(index)) {
				this.selectedRows = this.selectedRows.filter(i => i !== index);
				this.mainList.deselectRow(index);
			} else {
				this.selectedRows.push(index);
				this.mainList.selectRow(index);
			}
		},

		/* 프로세스 적용 후 체크 선택 해제 */
		resetSelectedRows() {
			this.selectedRows = [];
			this.selectAll = false;
		},

		/* 아코디언 설정 */
		toggleSection() {
			this.isSectionVisible = !this.isSectionVisible;
		},

		/* 체크박스 토글 */
		toggleCheckbox(index) {
			this.$set(this.selectedRows, index, !this.selectedRows[index]);
		},

		/* 모든 체크박스 토글  */
		toggleSelectAll() {
			this.selectedRows = this.mainList.data.map(() => this.selectAll);
		},

		/* ESC 버튼 다운시 핸들러 */
		handleEscKey(event) {
			if (event.key === 'Escape' || event.key === 'Esc') {
				this.closeModal('ESC');
			}
		},

		/* 엑셀 다운로드 */
		excelDownload() {
			// 데이터 조회
			this.setmainList(null, 1, 1, () => {
				let date = moment().format('YYYY-MM-DD');
				let filename = '사용자관리_' + date + '.xlsx';

				const dataForExcel = this.excelData.map((item, index) => ({
					'No': index + 1,
					'부서': item.ORGNZT_NM,
					'아이디': item.EMPLYR_ID,
					'사용자명': item.USER_NM,
					'사용여부': item.EMPLYR_STTUS_NM,
					'내선전화': item.OFFM_TELNO,
					'설정권한': item.AUTHOR_NM,
				}));

				// 데이터로 시트 생성
				const workSheet = XLSX.utils.json_to_sheet(dataForExcel);

				// 열 넓이 설정
				const colWidths = [
					{wpx: 30},			// No
					{wpx: 150},			// 부서
					{wpx: 100},			// 아이디
					{wpx: 100},			// 사용자명
					{wpx: 80},			// 사용여부
					{wpx: 80},			// 내선전화
					{wpx: 300},			// 설정권한
				];
				workSheet['!cols'] = colWidths;

				// 워크북 생성 및 시트 추가
				const workBook = XLSX.utils.book_new();
				XLSX.utils.book_append_sheet(workBook, workSheet, '사용자관리');

				XLSX.writeFile(workBook, filename);
			});
		},
		
		/* 테이블 정렬 상태값 적용 */
		sort(key) {
			if (this.sortKey === key) {
				this.sortOrders[key] = this.sortOrders[key] === 'ASC' ? 'DESC' : 'ASC';
			} else {
				this.sortKey = key;
				this.sortOrders = {
					ORGNZT_NM: 0,
					EMPLYR_ID: 'DESC',
					USER_NM: 0,
					EMPLYR_STTUS_NM: 0,
					OFFM_TELNO: 0,
					AUTHOR_NM: 0,
				};
				this.sortOrders[key] = 'ASC';
			}
		},
		
		/* 테이블 정렬 아이콘 */
		sortIcon(key) {
			if (this.sortOrders[key] === 'ASC') {
				return 'icon-arrow3'; // 오름차순 아이콘
			} else if (this.sortOrders[key] === 'DESC') {
				return 'icon-arrow1'; // 내림차순 아이콘
			} else {
				return ''; // 초기 정렬 상태 아이콘
			}
		}
	}
});
/*******************************************************************************************************************************************************************
 * vue end
 ********************************************************************************************************************************************************************/

/*******************************************************************************************************************************************************************
 * javascript start
 ********************************************************************************************************************************************************************/

function handleNullValues(row) {
	Object.keys(row).forEach(function (key) {
		if (row[key] === '') {
			row[key] = null;
		}
	});
	return row;
}
 
/*******************************************************************************************************************************************************************
 * javascript end
 ********************************************************************************************************************************************************************/

</script>

<!--*******************************************************************************************************************************************************************
 * style start
 *******************************************************************************************************************************************************************-->
<style>
	.thead-fixed {
		position: sticky;
		top: 0;
		z-index: 1;
		background-color: #FFF;
	}

	.sub_cont_wrap {
		width: 97%;
		margin: 0 auto;
		margin-top: 40px;
		margin-bottom: 60px;
	}

	.sub_cont_wrap .sub_cont_box {
		padding: 20px;
		margin-bottom: 0px;
	}

	.row .col.l2 {
		width: 20%;
		margin-left: auto;
		left: auto;
		right: auto
	}

	.row .col.l4 {
		width: 40%;
		margin-left: auto;
		left: auto;
		right: auto
	}

	.row .col.l5 {
		width: 50%;
		margin-left: auto;
		left: auto;
		right: auto
	}

	.row .col.l6 {
		width: 60%;
		margin-left: auto;
		left: auto;
		right: auto
	}

	th,
	td {
		/* 텍스트 줄바꿈 방지 */
		white-space: nowrap;
		/* 넘치는 텍스트 숨김 */
		overflow: hidden;
		text-overflow: ellipsis;
	}

	/* 트리 구조를 위한 CSS */
	.dept-tree {
		list-style-type: none;
		padding-left: 20px;
	}

	.dept-node {
		display: flex;
		align-items: center;
		cursor: pointer;
		padding: 10px 0;
		position: relative;
	}

	.dept-node.selected {
		background-color: rgb(0, 64, 128);
		color: white;
	}

	.dept-node.open:before {
		content: "└";
		/* 부모 노드가 열린 경우 */
		margin-right: 5px;
	}

	.dept-node:not(.open):before {
		content: "-";
		/* 부모 노드가 닫힌 경우 */
		margin-right: 5px;
	}

	/* 자식 노드가 있는 경우를 나타내는 스타일 */
	.dept-node.has-children {
		color: #4f5685;
		font-weight: bold;
	}

	/* 자식 노드가 있는 경우를 나타내는 스타일(before/open) */
	.dept-node.has-children.open:before {
		content: "└";
		color: #4f5685;
		font-weight: bold;
	}

	/* 자식 노드가 있는 경우를 나타내는 스타일(before/closed) */
	.dept-node.has-children::before {
		content: "≡";
		color: #4f5685;
		font-weight: bold;
	}

	.sub-tree {
		padding-left: 10px;
		/* 자식 노드 리스트의 들여쓰기 설정 */
	}

	.parent-node {
		cursor: pointer;
		font-weight: bold;
	}

	.sortable {
		cursor: pointer;
		transition: background-color 0.3s, color 0.3s;
	}

	.sortable:hover {
		background-color: rgb(204, 204, 204);
		color: #333;
	}
</style>

<!--*******************************************************************************************************************************************************************
 * style end
 *******************************************************************************************************************************************************************-->
